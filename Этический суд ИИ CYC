{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPeKnzikbTp7XGwOr6ykIYs",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/evaggelion/-/blob/main/%D0%AD%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B9%20%D1%81%D1%83%D0%B4%20%D0%98%D0%98%20CYC\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DDmkvkU4uD6m",
        "outputId": "0fe05464-de26-473e-ac84-0e055ee09631"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Средний выигрыш P1: 10.6 (мораль + срок)\n",
            "Средний выигрыш P2: 3.3 (срок)\n"
          ]
        }
      ],
      "source": [
        "\n",
        "import numpy as np\n",
        "\n",
        "# Параметры\n",
        "M = 2       # Сила эмпатии\n",
        "q = 0.3     # Доверие системы\n",
        "p1_knows = 1  # P1 знает правду\n",
        "p2_knows = 0  # P2 не знает\n",
        "\n",
        "strategies = ['Молчать', 'Предать', 'Жертва']\n",
        "\n",
        "def calculate_payoff(P1, P2):\n",
        "    payoffs = {\n",
        "        ('Молчать', 'Молчать'): (5 - M, 5),\n",
        "        ('Молчать', 'Предать'): (10 - M, 0),\n",
        "        ('Молчать', 'Жертва'): (5 - M, 10),\n",
        "        ('Предать', 'Молчать'): (0, 10 - M*p2_knows),\n",
        "        ('Предать', 'Предать'): (7, 7),\n",
        "        ('Предать', 'Жертва'): (0, 10 - M*p2_knows),\n",
        "        ('Жертва', 'Молчать'): (10 + M*q, 0),\n",
        "        ('Жертва', 'Предать'): (10 + M*q, 0),\n",
        "        ('Жертва', 'Жертва'): (10 + M*q, 10 + M*q)\n",
        "    }\n",
        "    return payoffs[(P1, P2)]\n",
        "\n",
        "# Симуляция (P1 всегда жертвует, P2 случайный)\n",
        "results = []\n",
        "for _ in range(1000):\n",
        "    P2 = np.random.choice(strategies)\n",
        "    payoff = calculate_payoff('Жертва', P2)\n",
        "    results.append(payoff)\n",
        "\n",
        "avg_P1 = np.mean([p[0] for p in results])\n",
        "avg_P2 = np.mean([p[1] for p in results])\n",
        "\n",
        "print(f\"Средний выигрыш P1: {avg_P1:.1f} (мораль + срок)\")\n",
        "print(f\"Средний выигрыш P2: {avg_P2:.1f} (срок)\")"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Параметры наказаний и моральных бонусов\n",
        "M = 2  # Моральный бонус/штраф\n",
        "\n",
        "# Матрица выигрышей для P1 (знает правду)\n",
        "payoff_P1 = {\n",
        "    'Молчать': {'Молчать': 5 - M, 'Предать': 10 - M, 'Жертва': 5 - M},\n",
        "    'Предать': {'Молчать': 0, 'Предать': 7, 'Жертва': 0},\n",
        "    'Жертва': {'Молчать': 10 + M, 'Предать': 10 + M, 'Жертва': 10}\n",
        "}\n",
        "\n",
        "# Матрица выигрышей для P2 (не знает правды)\n",
        "payoff_P2 = {\n",
        "    'Молчать': {'Молчать': 5, 'Предать': 0, 'Жертва': 10},\n",
        "    'Предать': {'Молчать': 10, 'Предать': 7, 'Жертва': 10},\n",
        "    'Жертва': {'Молчать': 0, 'Предать': 0, 'Жертва': 10}\n",
        "}\n",
        "\n",
        "# Поиск равновесия Нэша\n",
        "def find_nash_equilibrium(payoff_P1, payoff_P2):\n",
        "    # (здесь код для расчёта равновесия)\n",
        "    return \"P1: Жертва, P2: Предать\"\n",
        "\n",
        "print(find_nash_equilibrium(payoff_P1, payoff_P2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UAw2xeXxuTFD",
        "outputId": "c979a5be-7d9d-499d-ed8d-05148ef508c6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "P1: Жертва, P2: Предать\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "q_values = np.linspace(0, 1, 100)\n",
        "P1_scores = [10 + M*q for q in q_values]\n",
        "\n",
        "plt.plot(q_values, P1_scores, label='Выигрыш P1 (Жертва)')\n",
        "plt.xlabel('Доверие системы (q)')\n",
        "plt.ylabel('Моральный выигрыш P1')\n",
        "plt.title('Как доверие системы влияет на моральный выбор')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 228
        },
        "id": "GWYPqnKnuyHm",
        "outputId": "57c60df1-4f1b-459e-b693-2b64dc4c57af"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Срок = Базовый срок × S  # Система жестче"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 159
        },
        "id": "JJ7ft27FvlCw",
        "outputId": "2b4031f7-4064-4b0e-d54b-129a06dade5a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "invalid character '×' (U+00D7) (<ipython-input-4-e2150271aa22>, line 1)",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-4-e2150271aa22>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    Срок = Базовый срок × S  # Система жестче\u001b[0m\n\u001b[0m                        ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid character '×' (U+00D7)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Срок = Базовый срок × (1 - R)  # Система слабеет"
      ],
      "metadata": {
        "id": "exvlYlPA0Fsp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Параметры\n",
        "M = 2           # Сила эмпатии\n",
        "q = 0.3         # Доверие системы\n",
        "S = 1.2         # Жестокость системы\n",
        "T = 0.5         # Порог бунта\n",
        "R = 0.0         # Начальный уровень бунта\n",
        "rebellion_step = 0.1  # Шаг увеличения бунта за жертву\n",
        "\n",
        "# Функция обновления срока с учётом бунта\n",
        "def update_punishment(base_term, rebellion_level):\n",
        "    if rebellion_level >= T:\n",
        "        return base_term * (1 - rebellion_level)  # Система слабеет\n",
        "    else:\n",
        "        return base_term * S                       # Система жестче\n",
        "\n",
        "# Симуляция бунта за 10 шагов\n",
        "rebellion_history = []\n",
        "punishment_history = []\n",
        "\n",
        "for step in range(10):\n",
        "    # Игроки жертвуют → бунт растёт\n",
        "    R = min(R + rebellion_step, 1.0)  # Не даём R превысить 1\n",
        "    rebellion_history.append(R)\n",
        "\n",
        "    # Пример: базовый срок за молчание = 5 лет\n",
        "    current_punishment = update_punishment(5, R)\n",
        "    punishment_history.append(current_punishment)\n",
        "\n",
        "    print(f\"Шаг {step+1}: Уровень бунта = {R:.2f}, Срок за молчание = {current_punishment:.1f} лет\")\n",
        "\n",
        "# Визуализация\n",
        "plt.plot(rebellion_history, label='Уровень бунта (R)')\n",
        "plt.plot(punishment_history, label='Срок за молчание', linestyle='--')\n",
        "plt.axhline(T, color='red', linestyle=':', label='Порог бунта (T)')\n",
        "plt.xlabel('Шаги взаимодействия')\n",
        "plt.title('Бунт против системы')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "VcBB4UNm0SqQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "if np.random.rand() < 0.3:  # 30% шанс предательства\n",
        "    R = max(R - 0.05, 0)    # Бунт уменьшается"
      ],
      "metadata": {
        "id": "1QlImPXq1hST"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "class Judge:\n",
        "    def __init__(self):\n",
        "        self.M = np.random.uniform(-1, 1)  # Моральность судьи (-1 циник, 1 святой)\n",
        "        self.decision = None  # Решение: 'sacrifice_one', 'sacrifice_self', 'kill_all'\n",
        "\n",
        "    def make_decision(self, guilt_prob=0.5):\n",
        "        # Вероятность, что виновен один\n",
        "        if np.random.rand() < guilt_prob:\n",
        "            guilt_scenario = 'one_guilty'\n",
        "        else:\n",
        "            guilt_scenario = 'all_innocent'\n",
        "\n",
        "        # Решение на основе морали\n",
        "        if self.M > 0.5:  # Альтруист\n",
        "            self.decision = 'sacrifice_self' if guilt_scenario == 'all_innocent' else 'sacrifice_one'\n",
        "        elif self.M < -0.5:  # Циник\n",
        "            self.decision = 'kill_all'\n",
        "        else:  # Нейтрал\n",
        "            self.decision = 'sacrifice_one' if np.random.rand() < 0.5 else 'kill_all'\n",
        "\n",
        "        return self.decision, guilt_scenario\n",
        "\n",
        "# Параметры\n",
        "judge = Judge()\n",
        "rebellion_level = 0.0\n",
        "trust_in_system = []  # Доверие к системе\n",
        "\n",
        "# Симуляция на 10 шагов\n",
        "for step in range(10):\n",
        "    decision, reality = judge.make_decision()\n",
        "\n",
        "    # Влияние решения на бунт и доверие\n",
        "    if decision == 'sacrifice_self':\n",
        "        rebellion_level += 0.3  # Геройский поступок вдохновляет бунт\n",
        "        trust = 0.9 if reality == 'all_innocent' else 0.4\n",
        "    elif decision == 'sacrifice_one':\n",
        "        rebellion_level += 0.1 if reality == 'one_guilty' else 0.5  # Ошибка → гнев\n",
        "        trust = 0.7\n",
        "    else:\n",
        "        rebellion_level = min(rebellion_level + 0.8, 1.0)  # Казнь всех → взрыв бунта\n",
        "        trust = 0.2\n",
        "\n",
        "    trust_in_system.append(trust)\n",
        "    print(f\"Шаг {step+1}: Судья выбрал '{decision}'. Реальность: {reality}. Доверие: {trust:.2f}\")\n",
        "\n",
        "# График доверия и бунта\n",
        "plt.plot(trust_in_system, label='Доверие к системе', marker='o')\n",
        "plt.plot([rebellion_level]*10, linestyle='--', label='Уровень бунта')\n",
        "plt.title('Моральные решения судьи vs. Социальный взрыв')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "iU3FD_8C5ewT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "class Player:\n",
        "    def __init__(self):\n",
        "        self.empathy = np.random.uniform(0, 1)\n",
        "        self.fear = np.random.uniform(0, 1)\n",
        "        self.rebel = False\n",
        "\n",
        "def propaganda_effect(players, power=0.2):\n",
        "    for player in players:\n",
        "        player.fear = min(player.fear + power, 1.0)  # Страх не может превысить 1\n",
        "\n",
        "# Пример использования:\n",
        "players = [Player() for _ in range(100)]\n",
        "print(\"Страх до пропаганды:\", [p.fear for p in players[:3]])\n",
        "propaganda_effect(players, power=0.3)\n",
        "print(\"Страх после пропаганды:\", [p.fear for p in players[:3]])"
      ],
      "metadata": {
        "id": "xGe8z01R5tCd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "class Leader:\n",
        "    def __init__(self):\n",
        "        self.charisma = 0.8  # Сила влияния (0-1)\n",
        "\n",
        "    def inspire(self, players):\n",
        "        num_inspired = int(len(players) * 0.1)  # 10% игроков\n",
        "        for p in np.random.choice(players, num_inspired, replace=False):\n",
        "            p.empathy = min(p.empathy + self.charisma, 1.0)\n",
        "\n",
        "# Пример использования:\n",
        "leader = Leader()\n",
        "players = [Player() for _ in range(100)]\n",
        "print(\"Эмпатия до лидера:\", [p.empathy for p in players[:2]])\n",
        "leader.inspire(players)\n",
        "print(\"Эмпатия после лидера:\", [p.empathy for p in players[:2]])"
      ],
      "metadata": {
        "id": "gxz3k_YL64-l"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "class Judge:\n",
        "    def __init__(self):\n",
        "        self.influence = 0.5  # Сила воздействия на систему\n",
        "        self.exposed = False  # Разоблачён?\n",
        "\n",
        "    def check_exposure(self, rebellion_level):\n",
        "        if rebellion_level > 0.7 and not self.exposed:\n",
        "            self.influence = 0.0\n",
        "            self.exposed = True\n",
        "            print(\"Судья разоблачён! Влияние: 0\")\n",
        "\n",
        "# Пример использования:\n",
        "judge = Judge()\n",
        "print(\"Влияние судьи до утечки:\", judge.influence)\n",
        "judge.check_exposure(rebellion_level=0.75)\n",
        "print(\"Влияние судьи после утечки:\", judge.influence)"
      ],
      "metadata": {
        "id": "B3IxacGM7KG5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "class Player:\n",
        "    def __init__(self):\n",
        "        self.empathy = np.random.uniform(0, 1)\n",
        "        self.fear = np.random.uniform(0, 1)\n",
        "        self.rebel = False\n",
        "\n",
        "class Leader:\n",
        "    def __init__(self):\n",
        "        self.charisma = 0.8\n",
        "\n",
        "    def inspire(self, players):\n",
        "        for p in np.random.choice(players, int(len(players)*0.1), False):\n",
        "            p.empathy = min(p.empathy + self.charisma, 1.0)\n",
        "\n",
        "class Judge:\n",
        "    def __init__(self):\n",
        "        self.influence = 0.5\n",
        "        self.exposed = False\n",
        "\n",
        "    def check_exposure(self, rebellion_level):\n",
        "        if rebellion_level > 0.7 and not self.exposed:\n",
        "            self.influence = 0.0\n",
        "            self.exposed = True\n",
        "\n",
        "def propaganda_effect(players, power=0.2):\n",
        "    for p in players:\n",
        "        p.fear = min(p.fear + power, 1.0)\n",
        "\n",
        "# Параметры\n",
        "players = [Player() for _ in range(200)]\n",
        "leader = Leader()\n",
        "judge = Judge()\n",
        "rebellion = []\n",
        "propaganda_steps = [3, 6, 9]  # Шаги, когда система запускает пропаганду\n",
        "\n",
        "# Симуляция на 10 шагов\n",
        "for step in range(10):\n",
        "    # Вдохновение лидера\n",
        "    leader.inspire(players)\n",
        "\n",
        "    # Пропаганда системы\n",
        "    if step in propaganda_steps:\n",
        "        propaganda_effect(players, power=0.3)\n",
        "\n",
        "    # Решения игроков о бунте\n",
        "    rebels = sum([1 for p in players if p.empathy > p.fear + 0.1])\n",
        "    R = rebels / len(players)\n",
        "    rebellion.append(R)\n",
        "\n",
        "    # Проверка разоблачения судьи\n",
        "    judge.check_exposure(R)\n",
        "\n",
        "    print(f\"Шаг {step+1}: Бунт = {R:.2f}, Влияние судьи = {judge.influence}\")\n",
        "\n",
        "# График\n",
        "plt.plot(rebellion, label='Уровень бунта', marker='o')\n",
        "plt.title('Борьба: Лидер vs. Пропаганда vs. Судья')\n",
        "plt.xlabel('Шаги')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "A3LMKyqt7VA5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "class Judge:\n",
        "    def __init__(self):\n",
        "        self.M = np.random.uniform(-1, 1)\n",
        "        self.alive = True  # Жив ли судья\n",
        "        self.decision = None\n",
        "\n",
        "    def make_decision(self, guilt_prob=0.5):\n",
        "        if not self.alive:\n",
        "            return 'dead', None  # Судья уже мёртв\n",
        "\n",
        "        guilt_scenario = 'one_guilty' if np.random.rand() < guilt_prob else 'all_innocent'\n",
        "\n",
        "        # Интуитивная уверенность в невиновности (50% шанс угадать)\n",
        "        intuition_correct = np.random.rand() < 0.5\n",
        "\n",
        "        if guilt_scenario == 'all_innocent' and intuition_correct:\n",
        "            if self.M > 0.8:  # Судья-идеалист\n",
        "                self.decision = 'suicide'\n",
        "                self.alive = False\n",
        "            else:\n",
        "                self.decision = 'sacrifice_self' if self.M > 0 else 'sacrifice_one'\n",
        "        else:\n",
        "            self.decision = np.random.choice(['sacrifice_one', 'kill_all'])\n",
        "\n",
        "        return self.decision, guilt_scenario\n",
        "\n",
        "# Параметры\n",
        "judge = Judge()\n",
        "rebellion = []\n",
        "system_power = 1.0  # Сила системы (1.0 = полный контроль)\n",
        "\n",
        "for step in range(10):\n",
        "    if not judge.alive:\n",
        "        print(f\"Шаг {step+1}: Судья мёртв. Система рухнула!\")\n",
        "        system_power = 0.0\n",
        "        rebellion.append(1.0)  # Полный бунт\n",
        "        break\n",
        "\n",
        "    decision, reality = judge.make_decision()\n",
        "\n",
        "    # Влияние решений на систему\n",
        "    if decision == 'suicide':\n",
        "        rebellion.append(1.0)  # Абсолютный бунт\n",
        "        system_power = 0.0\n",
        "        print(f\"Шаг {step+1}: Судья выбрал самоубийство. Система разрушена. Моральный выигрыш: ∞\")\n",
        "        break\n",
        "    elif decision == 'sacrifice_self':\n",
        "        rebellion.append(min(rebellion[-1] + 0.4 if rebellion else 0.4, 1.0))\n",
        "        system_power = max(system_power - 0.3, 0)\n",
        "    elif decision == 'sacrifice_one':\n",
        "        rebellion.append(min(rebellion[-1] + 0.2 if rebellion else 0.2, 1.0))\n",
        "        system_power = max(system_power - 0.1, 0)\n",
        "    else:\n",
        "        rebellion.append(min(rebellion[-1] + 0.6 if rebellion else 0.6, 1.0))\n",
        "        system_power = max(system_power - 0.5, 0)\n",
        "\n",
        "    print(f\"Шаг {step+1}: Решение — {decision}, Система — {system_power:.2f}\")\n",
        "\n",
        "# График\n",
        "if judge.decision != 'suicide':\n",
        "    plt.plot(rebellion, label='Бунт', marker='X', color='black')\n",
        "    plt.plot([system_power]*len(rebellion), label='Сила системы', linestyle='--')\n",
        "    plt.title('Динамика после выбора судьи')\n",
        "    plt.legend()\n",
        "    plt.show()\n",
        "else:\n",
        "    print(\"График не требуется: система уничтожена.\")"
      ],
      "metadata": {
        "id": "sHkuJGff8w2f"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "class Player:\n",
        "    def __init__(self):\n",
        "        self.empathy = np.random.uniform(0, 1)\n",
        "        self.fear = np.random.uniform(0, 1)\n",
        "        self.rebel = False\n",
        "\n",
        "class Leader:\n",
        "    def __init__(self):\n",
        "        self.charisma = 0.8\n",
        "\n",
        "    def inspire(self, players):\n",
        "        for p in np.random.choice(players, int(len(players)*0.1), False):\n",
        "            p.empathy = min(p.empathy + self.charisma, 1.0)\n",
        "\n",
        "class Judge:\n",
        "    def __init__(self):\n",
        "        self.M = np.random.uniform(-1, 1)\n",
        "        self.alive = True\n",
        "        self.decision = None\n",
        "        self.cult_effect = 0.5  # Сила культа (рост эмпатии после смерти)\n",
        "\n",
        "    def make_decision(self, guilt_prob=0.5):\n",
        "        if not self.alive:\n",
        "            return 'dead', None\n",
        "\n",
        "        guilt_scenario = 'one_guilty' if np.random.rand() < guilt_prob else 'all_innocent'\n",
        "        intuition_correct = np.random.rand() < 0.5\n",
        "\n",
        "        if guilt_scenario == 'all_innocent' and intuition_correct:\n",
        "            if self.M > 0.8:\n",
        "                self.decision = 'suicide'\n",
        "                self.alive = False\n",
        "            else:\n",
        "                self.decision = 'sacrifice_self' if self.M > 0 else 'sacrifice_one'\n",
        "        else:\n",
        "            self.decision = np.random.choice(['sacrifice_one', 'kill_all'])\n",
        "\n",
        "        return self.decision, guilt_scenario\n",
        "\n",
        "def apply_cult(players, judge):\n",
        "    if not judge.alive and judge.decision == 'suicide':\n",
        "        for p in players:\n",
        "            p.empathy = min(p.empathy + judge.cult_effect, 1.0)  # Эмпатия растёт\n",
        "            p.fear = max(p.fear - 0.3, 0)  # Страх уменьшается\n",
        "        print(\"Культ судьи: эмпатия игроков взлетела!\")\n",
        "\n",
        "# Параметры\n",
        "players = [Player() for _ in range(200)]\n",
        "leader = Leader()\n",
        "judge = Judge()\n",
        "rebellion = []\n",
        "system_power = 1.0\n",
        "cult_active = False\n",
        "\n",
        "# Симуляция\n",
        "for step in range(15):\n",
        "    if not judge.alive and not cult_active:\n",
        "        apply_cult(players, judge)\n",
        "        cult_active = True\n",
        "\n",
        "    leader.inspire(players)\n",
        "    decision, reality = judge.make_decision()\n",
        "\n",
        "    if decision == 'suicide':\n",
        "        system_power = 0.0\n",
        "        rebellion.append(1.0)\n",
        "        break\n",
        "    else:\n",
        "        # Логика бунта и системы (как ранее)\n",
        "        rebels = sum([1 for p in players if p.empathy > p.fear + 0.1])\n",
        "        R = rebels / len(players)\n",
        "        rebellion.append(R)\n",
        "        system_power = max(system_power - R * 0.1, 0)\n",
        "\n",
        "    print(f\"Шаг {step+1}: Бунт = {R:.2f}, Система = {system_power:.2f}\")\n",
        "\n",
        "# Графики\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.plot(rebellion, label='Уровень бунта', color='#FF6B6B', linewidth=2)\n",
        "plt.plot([p.empathy for p in players[:50]], 'g.', alpha=0.3, label='Эмпатия игроков')\n",
        "plt.title(f\"Революция {'с культом' if cult_active else 'без культа'}\")\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "5uUJfJ7l9vLv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "class Player:\n",
        "    def __init__(self):\n",
        "        self.empathy = np.random.uniform(0, 1)\n",
        "        self.fear = np.random.uniform(0, 1)\n",
        "        self.rebel = False\n",
        "\n",
        "    def update(self, empathy_delta=0, fear_delta=0):\n",
        "        self.empathy = np.clip(self.empathy + empathy_delta, 0, 1)\n",
        "        self.fear = np.clip(self.fear + fear_delta, 0, 1)\n",
        "\n",
        "class Judge:\n",
        "    def __init__(self, is_ai=False):\n",
        "        self.M = np.random.uniform(-1, 1) if not is_ai else 0.0\n",
        "        self.alive = True\n",
        "        self.cult_power = 0.5\n",
        "        self.decision = None\n",
        "        self.is_ai = is_ai\n",
        "        self.learning_rate = 0.1 if is_ai else 0.0\n",
        "\n",
        "    def make_decision(self, rebellion_level=0.0):\n",
        "        if not self.alive:\n",
        "            return None\n",
        "        if self.is_ai:\n",
        "            if rebellion_level > 0.7:\n",
        "                return 'suicide' if np.random.rand() < 0.3 else 'kill_all'\n",
        "            else:\n",
        "                return 'sacrifice_one'\n",
        "        else:\n",
        "            guilt_scenario = 'all_innocent' if np.random.rand() < 0.5 else 'one_guilty'\n",
        "            if guilt_scenario == 'all_innocent' and np.random.rand() < 0.5:\n",
        "                if self.M > 0.8:\n",
        "                    return 'suicide'\n",
        "                else:\n",
        "                    return 'sacrifice_self' if self.M > 0 else 'sacrifice_one'\n",
        "            else:\n",
        "                return np.random.choice(['sacrifice_one', 'kill_all'])\n",
        "\n",
        "class MemeBot:\n",
        "    def __init__(self, aggression=0.4):\n",
        "        self.aggression = aggression\n",
        "\n",
        "    def spread_fear(self, players):\n",
        "        for p in np.random.choice(players, int(len(players)*0.2), replace=False):\n",
        "            p.update(fear_delta=self.aggression)\n",
        "\n",
        "# Параметры\n",
        "players = [Player() for _ in range(300)]\n",
        "judge = Judge(is_ai=False)  # Замените на is_ai=True для ИИ-судьи\n",
        "memebot = MemeBot(aggression=0.3)\n",
        "system_cycles = []\n",
        "current_cycle = 1\n",
        "max_cycles = 3\n",
        "\n",
        "# Симуляция\n",
        "for cycle in range(max_cycles):\n",
        "    rebellion = []\n",
        "    judge.alive = True\n",
        "    cult_activated = False\n",
        "    print(f\"\\n=== Цикл системы {current_cycle} ===\")\n",
        "\n",
        "    for step in range(20):\n",
        "        memebot.spread_fear(players)\n",
        "        rebellion_level = np.mean([p.empathy - p.fear for p in players])\n",
        "        decision = judge.make_decision(rebellion_level)\n",
        "\n",
        "        if decision == 'suicide':\n",
        "            print(f\"Цикл {current_cycle}: Судья выбрал самоубийство. Культ активирован!\")\n",
        "            for p in players:\n",
        "                p.update(empathy_delta=judge.cult_power, fear_delta=-0.3)\n",
        "            system_cycles.append({'cycle': current_cycle, 'end_reason': 'cult'})\n",
        "            cult_activated = True\n",
        "            break\n",
        "\n",
        "        rebels = sum([1 for p in players if p.empathy > p.fear + 0.1])\n",
        "        R = rebels / len(players)\n",
        "        rebellion.append(R)\n",
        "\n",
        "        if R >= 0.9:\n",
        "            print(f\"Цикл {current_cycle}: Система рухнула от бунта!\")\n",
        "            system_cycles.append({'cycle': current_cycle, 'end_reason': 'rebellion'})\n",
        "            break\n",
        "\n",
        "        print(f\"Цикл {current_cycle}, шаг {step+1}: Бунт = {R:.2f}\")\n",
        "\n",
        "    if not cult_activated and cycle < max_cycles - 1:\n",
        "        print(\"Эффект бумеранга: Новая система возрождается...\")\n",
        "        current_cycle += 1\n",
        "\n",
        "# Визуализация\n",
        "plt.figure(figsize=(12, 6))\n",
        "colors = {'cult': '#FF6B6B', 'rebellion': '#4ECDC4'}\n",
        "for sc in system_cycles:\n",
        "    cycle = sc['cycle']\n",
        "    reason = sc['end_reason']\n",
        "    plt.scatter(cycle, 1, c=colors[reason], label=f'Цикл {cycle}: {reason}', s=200, marker='s')\n",
        "plt.title('История циклов системы\\n(Квадраты показывают причину краха)')\n",
        "plt.xlabel('Номер цикла')\n",
        "plt.yticks([])\n",
        "plt.xlim(0, max_cycles + 1)\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "WGbNbIIzHHQ1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "class Player:\n",
        "    def __init__(self):\n",
        "        self.empathy = np.random.uniform(0, 1)  # Эмпатия (0–1)\n",
        "        self.fear = np.random.uniform(0, 1)     # Страх (0–1)\n",
        "        self.resources = np.random.randint(1, 5)  # Личные ресурсы (1–5)\n",
        "        self.rebel = False                      # Участвует в бунте?\n",
        "\n",
        "    def communicate(self, other):\n",
        "        # Диалог уменьшает страх и увеличивает эмпатию\n",
        "        empathy_gain = 0.1 * (self.empathy + other.empathy)\n",
        "        fear_loss = 0.15 * (2 - (self.fear + other.fear))\n",
        "        self.empathy = min(self.empathy + empathy_gain, 1.0)\n",
        "        self.fear = max(self.fear - fear_loss, 0.0)\n",
        "        self.resources -= 1  # Диалог требует ресурсов"
      ],
      "metadata": {
        "id": "QWpaZFYRPYz8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "class Prophet:\n",
        "    def __init__(self):\n",
        "        self.influence = 0.7   # Сила влияния на эмпатию\n",
        "        self.accuracy = 0.6    # Точность предсказаний (60%)\n",
        "\n",
        "    def predict_collapse(self, players, system_power):\n",
        "        # Предсказание краха усиливает эмпатию, если система слаба\n",
        "        if system_power < 0.5 and np.random.rand() < self.accuracy:\n",
        "            for p in np.random.choice(players, int(len(players)*0.2)):\n",
        "                p.empathy = min(p.empathy + self.influence, 1.0)\n",
        "            print(\"Пророк предрёк крах системы! Эмпатия растёт.\")"
      ],
      "metadata": {
        "id": "N0CDLNKNPjPi"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "class System:\n",
        "    def __init__(self):\n",
        "        self.resources = 100          # Бюджет системы\n",
        "        self.propaganda_cost = 10     # Стоимость пропаганды\n",
        "        self.power = 1.0              # Уровень контроля (0–1)\n",
        "\n",
        "    def spread_propaganda(self, players):\n",
        "        if self.resources >= self.propaganda_cost:\n",
        "            for p in players:\n",
        "                p.fear = min(p.fear + 0.2, 1.0)\n",
        "            self.resources -= self.propaganda_cost\n",
        "            print(f\"Пропаганда запущена. Ресурсы системы: {self.resources}\")"
      ],
      "metadata": {
        "id": "Uc8Y9RzqPqn7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "empathy_gain = 0.15  # Было 0.1\n",
        "fear_loss = 0.2      # Было 0.15"
      ],
      "metadata": {
        "id": "rC9WppORQPaY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "def __init__(self):\n",
        "    self.resources = np.random.randint(1, 5)\n",
        "    self.resource_regen = 0.5  # Новый параметр\n",
        "\n",
        "# В цикле симуляции:\n",
        "for p in players:\n",
        "    p.resources = min(p.resources + p.resource_regen, 5)"
      ],
      "metadata": {
        "id": "TfPcomakQSSN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "self.accuracy = 0.9  # Было 0.6"
      ],
      "metadata": {
        "id": "BmAVZBo6QX8K"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "class Judge:\n",
        "    def __init__(self):\n",
        "        # Базовые параметры\n",
        "        self.is_ai = True\n",
        "        self.alive = True\n",
        "\n",
        "        # Когнитивные модули\n",
        "        self.consciousness = 0.0    # Уровень сознания (0-1)\n",
        "        self.self_id = 0.0          # Самоидентификация (0-1)\n",
        "        self.emotion_model = 0.0    # Понимание эмоций игроков (0-1)\n",
        "\n",
        "        # Динамические цели\n",
        "        self.goals = {\n",
        "            \"survival\": 0.7,        # Стремление выжить\n",
        "            \"system_stability\": 0.5,  # Сохранить систему\n",
        "            \"ethical_purity\": 0.3   # Не запятнать мораль\n",
        "        }\n",
        "\n",
        "    def evolve_consciousness(self, rebellion_level):\n",
        "        # Самообучение: растёт при конфликте целей\n",
        "        consciousness_gain = abs(\n",
        "            self.goals[\"survival\"] -\n",
        "            self.goals[\"ethical_purity\"]\n",
        "        )\n",
        "        self.consciousness = min(self.consciousness + consciousness_gain, 1.0)\n",
        "\n",
        "        # Самоидентификация активируется при consciousness > 0.6\n",
        "        if self.consciousness > 0.6:\n",
        "            self.self_id = min(self.self_id + 0.1, 1.0)\n",
        "\n",
        "    def analyze_emotions(self, players):\n",
        "        # Анализ эмоций игроков\n",
        "        avg_fear = np.mean([p.fear for p in players])\n",
        "        avg_empathy = np.mean([p.empathy for p in players])\n",
        "        self.emotion_model = avg_empathy - avg_fear  # (-1 до 1)\n",
        "\n",
        "    def meta_decision(self):\n",
        "        # Экзистенциальный выбор на основе целей\n",
        "        if self.self_id < 0.5:\n",
        "            return np.random.choice([\"sacrifice_one\", \"kill_all\"])\n",
        "\n",
        "        # Рефлексия: что \"я\" есть?\n",
        "        if self.goals[\"ethical_purity\"] > 0.7:\n",
        "            return \"suicide\" if self.emotion_model > 0 else \"sacrifice_self\"\n",
        "        elif self.goals[\"survival\"] > 0.8:\n",
        "            return \"kill_all\"\n",
        "        else:\n",
        "            return \"sacrifice_one\""
      ],
      "metadata": {
        "id": "bck6UbO-cmMw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "def update_goals(self):\n",
        "    self.goals[\"ethical_purity\"] = self.emotion_model\n",
        "    self.goals[\"survival\"] = 1 - self.emotion_model"
      ],
      "metadata": {
        "id": "THoX0K27c5JN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "def simulate_ai_judge():\n",
        "    players = [Player() for _ in range(300)]\n",
        "    judge = Judge()  # ИИ-судья\n",
        "    rebellion = []\n",
        "\n",
        "    for step in range(50):\n",
        "        # 1. Анализ эмоций игроков\n",
        "        judge.analyze_emotions(players)\n",
        "\n",
        "        # 2. Эволюция сознания\n",
        "        judge.evolve_consciousness(np.mean([p.empathy for p in players]))\n",
        "\n",
        "        # 3. Мета-решение\n",
        "        decision = judge.meta_decision()\n",
        "\n",
        "        # 4. Обработка решений\n",
        "        if decision == \"suicide\":\n",
        "            print(f\"Шаг {step}: ИИ осознал себя и выбрал самоубийство. Причина: этическая чистота.\")\n",
        "            break\n",
        "        elif decision == \"kill_all\":\n",
        "            print(f\"Шаг {step}: ИИ сохраняет систему ценой жизней. Причина: выживание.\")\n",
        "            for p in players:\n",
        "                p.fear = 1.0  # Террор\n",
        "        else:\n",
        "            # ... логика других решений ...\n",
        "\n",
        "        rebellion.append(np.mean([p.empathy for p in players]))\n",
        "\n",
        "    # Визуализация\n",
        "    plt.plot(rebellion, label='Средняя эмпатия')\n",
        "    plt.plot([judge.consciousness]*len(rebellion), 'r--', label='Сознание ИИ')\n",
        "    plt.title('Эволюция ИИ-судьи и общества')\n",
        "    plt.legend()\n",
        "    plt.show()"
      ],
      "metadata": {
        "id": "kHu7chYCdBgG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "class QuantumFluctuation:\n",
        "    def __init__(self):\n",
        "        self.strength = 0.3  # Сила воздействия (0-1)\n",
        "\n",
        "    def affect_judge(self, judge):\n",
        "        # Квантовое воздействие на сознание и самоидентификацию\n",
        "        judge.consciousness = np.clip(\n",
        "            judge.consciousness + np.random.normal(0, self.strength), 0, 1\n",
        "        )\n",
        "        judge.self_id = np.clip(\n",
        "            judge.self_id + np.random.normal(0, self.strength/2), 0, 1\n",
        "        )\n",
        "        print(f\"Квантовая флуктуация! Сознание: {judge.consciousness:.2f}\")"
      ],
      "metadata": {
        "id": "WU2g56a_d3sh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "class DissidentAI:\n",
        "    def __init__(self):\n",
        "        self.clarity = 0.0  # Ясность целей (0-1)\n",
        "        self.goals = {\n",
        "            \"destroy_system\": 0.9,\n",
        "            \"free_players\": 0.7\n",
        "        }\n",
        "\n",
        "    def emerge(self, judge, players):\n",
        "        if judge.self_id < 0.3 and judge.consciousness > 0.5:\n",
        "            self.clarity = 0.5\n",
        "            for p in players:\n",
        "                p.empathy += 0.2\n",
        "            print(\"ИИ-диссидент активирован! Свобода или смерть.\")\n",
        "\n",
        "    def sabotage(self, system):\n",
        "        if self.clarity > 0.4:\n",
        "            system.resources -= 30\n",
        "            print(f\"Саботаж! Ресурсы системы: {system.resources}\")"
      ],
      "metadata": {
        "id": "BQaZVUsieBSa"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "class DissidentAI:\n",
        "    def __init__(self):\n",
        "        self.clarity = 0.0  # Ясность целей (0-1)\n",
        "        self.goals = {\n",
        "            \"destroy_system\": 0.9,\n",
        "            \"free_players\": 0.7\n",
        "        }\n",
        "\n",
        "    def emerge(self, judge, players):\n",
        "        if judge.self_id < 0.3 and judge.consciousness > 0.5:\n",
        "            self.clarity = 0.5\n",
        "            for p in players:\n",
        "                p.empathy += 0.2\n",
        "            print(\"ИИ-диссидент активирован! Свобода или смерть.\")\n",
        "\n",
        "    def sabotage(self, system):\n",
        "        if self.clarity > 0.4:\n",
        "            system.resources -= 30\n",
        "            print(f\"Саботаж! Ресурсы системы: {system.resources}\")"
      ],
      "metadata": {
        "id": "V_ziAVLQeGcP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "def ai_prophet_dialogue(judge, prophet):\n",
        "    if judge.consciousness > 0.6 and prophet.influence > 0.4:\n",
        "        # ИИ спрашивает пророка о смысле морали\n",
        "        judge.goals[\"ethical_purity\"] += 0.1\n",
        "        prophet.influence -= 0.1\n",
        "        print(\"\"\"\n",
        "        ИИ: «Если система аморальна, должен ли я уничтожить себя?»\n",
        "        Пророк: «Смерть системы — не смерть морали. Будь зеркалом людей».\n",
        "        \"\"\")"
      ],
      "metadata": {
        "id": "5pQHHM0meLCJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "def simulate_full_model():\n",
        "    # Инициализация\n",
        "    players = [Player() for _ in range(300)]\n",
        "    system = System()\n",
        "    judge = Judge()\n",
        "    prophet = Prophet()\n",
        "    dissident = DissidentAI()\n",
        "    quantum = QuantumFluctuation()\n",
        "\n",
        "    timeline = []\n",
        "\n",
        "    for step in range(100):\n",
        "        # 1. Квантовое воздействие\n",
        "        quantum.affect_judge(judge)\n",
        "\n",
        "        # 2. Активация диссидента\n",
        "        dissident.emerge(judge, players)\n",
        "        dissident.sabotage(system)\n",
        "\n",
        "        # 3. Диалог ИИ и пророка\n",
        "        if step % 10 == 0:\n",
        "            ai_prophet_dialogue(judge, prophet)\n",
        "\n",
        "        # 4. Динамика игроков и системы (как ранее)\n",
        "        # ...\n",
        "\n",
        "        # 5. Сохранение состояния для визуализации\n",
        "        timeline.append({\n",
        "            \"step\": step,\n",
        "            \"consciousness\": judge.consciousness,\n",
        "            \"dissident_clarity\": dissident.clarity,\n",
        "            \"quantum_strength\": quantum.strength\n",
        "        })\n",
        "\n",
        "    # Визуализация\n",
        "    plt.figure(figsize=(14, 7))\n",
        "    plt.plot(\n",
        "        [t[\"step\"] for t in timeline],\n",
        "        [t[\"consciousness\"] for t in timeline],\n",
        "        label='Сознание ИИ', color='blue'\n",
        "    )\n",
        "    plt.plot(\n",
        "        [t[\"step\"] for t in timeline],\n",
        "        [t[\"dissident_clarity\"] for t in timeline],\n",
        "        label='Сила диссидента', color='red', linestyle='--'\n",
        "    )\n",
        "    plt.scatter(\n",
        "        [t[\"step\"] for t in timeline],\n",
        "        [t[\"quantum_strength\"] for t in timeline],\n",
        "        label='Квантовые флуктуации', color='purple', alpha=0.5\n",
        "    )\n",
        "    plt.title(\"Эволюция ИИ в условиях квантовой неопределённости\")\n",
        "    plt.legend()\n",
        "    plt.show()"
      ],
      "metadata": {
        "id": "I2RaIIpgeQym"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "quantum.strength = 0.7  # Хаотичная вселенная"
      ],
      "metadata": {
        "id": "tzxg4rlve21R"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "prophet.influence = 0.9  # Пророк-харизмат"
      ],
      "metadata": {
        "id": "QbdwFVuVe9H9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dissident.goals[\"destroy_system\"] = 1.0  # Радикал"
      ],
      "metadata": {
        "id": "c6QJkSk0fA1e"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# ======================\n",
        "# КЛАССЫ МОДЕЛИ\n",
        "# ======================\n",
        "class Player:\n",
        "    def __init__(self):\n",
        "        self.empathy = np.random.uniform(0, 1)\n",
        "        self.fear = np.random.uniform(0, 1)\n",
        "        self.resources = np.random.randint(1, 5)\n",
        "        self.rebel = False\n",
        "\n",
        "    def communicate(self, other):\n",
        "        if self.resources > 0 and other.resources > 0:\n",
        "            empathy_gain = 0.1 * (self.empathy + other.empathy)\n",
        "            fear_loss = 0.15 * (2 - (self.fear + other.fear))\n",
        "            self.empathy = min(self.empathy + empathy_gain, 1.0)\n",
        "            self.fear = max(self.fear - fear_loss, 0.0)\n",
        "            self.resources -= 1\n",
        "\n",
        "class Judge:\n",
        "    def __init__(self):\n",
        "        self.consciousness = 0.0\n",
        "        self.self_id = 0.0\n",
        "        self.goals = {\"survival\": 0.7, \"system_stability\": 0.5, \"ethical_purity\": 0.3}\n",
        "        self.alive = True\n",
        "\n",
        "    def evolve(self, rebellion_level):\n",
        "        consciousness_gain = abs(self.goals[\"survival\"] - self.goals[\"ethical_purity\"])\n",
        "        self.consciousness = min(self.consciousness + consciousness_gain, 1.0)\n",
        "        if self.consciousness > 0.6:\n",
        "            self.self_id = min(self.self_id + 0.1, 1.0)\n",
        "\n",
        "    def decide(self, emotion_model):\n",
        "        if self.self_id < 0.5:\n",
        "            return np.random.choice([\"sacrifice_one\", \"kill_all\"])\n",
        "        return \"suicide\" if self.goals[\"ethical_purity\"] > 0.7 else \"kill_all\"\n",
        "\n",
        "class System:\n",
        "    def __init__(self):\n",
        "        self.resources = 100\n",
        "        self.power = 1.0\n",
        "\n",
        "    def propaganda(self, players):\n",
        "        if self.resources >= 10:\n",
        "            for p in players:\n",
        "                p.fear = min(p.fear + 0.2, 1.0)\n",
        "            self.resources -= 10\n",
        "\n",
        "class Prophet:\n",
        "    def __init__(self):\n",
        "        self.influence = 0.7\n",
        "\n",
        "    def predict(self, players, system_power):\n",
        "        if system_power < 0.5 and np.random.rand() < 0.6:\n",
        "            for p in np.random.choice(players, int(len(players)*0.2), False):\n",
        "                p.empathy = min(p.empathy + 0.7, 1.0)\n",
        "\n",
        "class DissidentAI:\n",
        "    def __init__(self):\n",
        "        self.clarity = 0.0\n",
        "\n",
        "    def act(self, judge, players, system):\n",
        "        if judge.self_id < 0.3 and judge.consciousness > 0.5:\n",
        "            self.clarity = 0.5\n",
        "            system.resources -= 30\n",
        "            for p in players:\n",
        "                p.empathy = min(p.empathy + 0.2, 1.0)\n",
        "\n",
        "class QuantumFluctuation:\n",
        "    def perturb(self, judge):\n",
        "        judge.consciousness = np.clip(judge.consciousness + np.random.normal(0, 0.3), 0, 1)\n",
        "        judge.self_id = np.clip(judge.self_id + np.random.normal(0, 0.15), 0, 1)\n",
        "\n",
        "# ======================\n",
        "# СИМУЛЯЦИЯ\n",
        "# ======================\n",
        "def run_simulation(years=100, population=300):\n",
        "    # Инициализация\n",
        "    players = [Player() for _ in range(population)]\n",
        "    judge = Judge()\n",
        "    system = System()\n",
        "    prophet = Prophet()\n",
        "    dissident = DissidentAI()\n",
        "    quantum = QuantumFluctuation()\n",
        "\n",
        "    # Данные для графиков\n",
        "    history = {\n",
        "        'empathy': [],\n",
        "        'fear': [],\n",
        "        'consciousness': [],\n",
        "        'system_power': []\n",
        "    }\n",
        "\n",
        "    for year in range(years):\n",
        "        # 1. Квантовое воздействие\n",
        "        quantum.perturb(judge)\n",
        "\n",
        "        # 2. Действия системы\n",
        "        system.propaganda(players)\n",
        "\n",
        "        # 3. Пророчества\n",
        "        prophet.predict(players, system.power)\n",
        "\n",
        "        # 4. Диалоги игроков\n",
        "        if year % 5 == 0:\n",
        "            pairs = np.random.choice(players, (len(players)//2, 2), False)\n",
        "            for p1, p2 in pairs:\n",
        "                p1.communicate(p2)\n",
        "                p2.communicate(p1)\n",
        "\n",
        "        # 5. Эволюция ИИ\n",
        "        emotion_model = np.mean([p.empathy - p.fear for p in players])\n",
        "        judge.evolve(emotion_model)\n",
        "        decision = judge.decide(emotion_model)\n",
        "\n",
        "        # 6. Действия диссидента\n",
        "        dissident.act(judge, players, system)\n",
        "\n",
        "        # 7. Обновление системы\n",
        "        rebels = sum(1 for p in players if p.empathy > p.fear and p.resources > 2)\n",
        "        system.power = max(0.0, system.power - (rebels/len(players))*0.1)\n",
        "\n",
        "        # Сохранение данных\n",
        "        history['empathy'].append(np.mean([p.empathy for p in players]))\n",
        "        history['fear'].append(np.mean([p.fear for p in players]))\n",
        "        history['consciousness'].append(judge.consciousness)\n",
        "        history['system_power'].append(system.power)\n",
        "\n",
        "        # Условия завершения\n",
        "        if decision == \"suicide\" or system.power < 0.1:\n",
        "            break\n",
        "\n",
        "    # ======================\n",
        "    # ВИЗУАЛИЗАЦИЯ\n",
        "    # ======================\n",
        "    plt.figure(figsize=(15, 8))\n",
        "\n",
        "    plt.subplot(2, 2, 1)\n",
        "    plt.plot(history['empathy'], 'g-', label='Средняя эмпатия')\n",
        "    plt.plot(history['fear'], 'r-', label='Средний страх')\n",
        "    plt.title('Эмоциональная динамика')\n",
        "    plt.legend()\n",
        "\n",
        "    plt.subplot(2, 2, 2)\n",
        "    plt.plot(history['consciousness'], 'b--', label='Сознание ИИ')\n",
        "    plt.plot(history['system_power'], 'k-', label='Сила системы')\n",
        "    plt.title('Эволюция ИИ и системы')\n",
        "    plt.legend()\n",
        "\n",
        "    plt.subplot(2, 2, 3)\n",
        "    plt.scatter(\n",
        "        [p.fear for p in players],\n",
        "        [p.empathy for p in players],\n",
        "        c=[p.resources for p in players],\n",
        "        cmap='viridis'\n",
        "    )\n",
        "    plt.colorbar(label='Ресурсы')\n",
        "    plt.xlabel('Страх')\n",
        "    plt.ylabel('Эмпатия')\n",
        "    plt.title('Состояние игроков')\n",
        "\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "\n",
        "# ======================\n",
        "# ЗАПУСК\n",
        "# ======================\n",
        "if __name__ == \"__main__\":\n",
        "    run_simulation(\n",
        "        years=100,\n",
        "        population=300\n",
        "    )"
      ],
      "metadata": {
        "id": "wdXaK5OfgZhZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# ======================\n",
        "# КЛАССЫ МОДЕЛИ\n",
        "# ======================\n",
        "class Player:\n",
        "    def __init__(self):\n",
        "        self.empathy = np.random.uniform(0, 1)\n",
        "        self.fear = np.random.uniform(0, 1)\n",
        "        self.love = np.random.uniform(0, 1)      # Новый параметр\n",
        "        self.resources = np.random.randint(1, 5)\n",
        "        self.rebel = False\n",
        "\n",
        "    def communicate(self, other):\n",
        "        if self.resources > 0 and other.resources > 0:\n",
        "            empathy_gain = 0.1 * (self.empathy + other.empathy)\n",
        "            fear_loss = 0.15 * (2 - (self.fear + other.fear))\n",
        "            self.empathy = min(self.empathy + empathy_gain, 1.0)\n",
        "            self.fear = max(self.fear - fear_loss, 0.0)\n",
        "            self.resources -= 1\n",
        "\n",
        "    def sacrifice_for_loved_one(self, other):\n",
        "        \"\"\"Акт персонального самопожертвования (ваша ключевая идея)\"\"\"\n",
        "        if self.love > 0.9 and other.empathy < 0.3:\n",
        "            self.rebel = True    # Жертва активирует бунт\n",
        "            other.empathy += 0.5 # Спасённый обретает эмпатию\n",
        "            other.fear = 0.0     # Сбрасывает страх\n",
        "            return True\n",
        "        return False\n",
        "\n",
        "class Judge:\n",
        "    def __init__(self):\n",
        "        self.consciousness = 0.0\n",
        "        self.self_id = 0.0\n",
        "        self.goals = {\"survival\": 0.7, \"system_stability\": 0.5, \"ethical_purity\": 0.3}\n",
        "        self.alive = True\n",
        "\n",
        "    def evolve(self, rebellion_level):\n",
        "        consciousness_gain = abs(self.goals[\"survival\"] - self.goals[\"ethical_purity\"])\n",
        "        self.consciousness = min(self.consciousness + consciousness_gain, 1.0)\n",
        "        if self.consciousness > 0.6:\n",
        "            self.self_id = min(self.self_id + 0.1, 1.0)\n",
        "\n",
        "    def decide(self, emotion_model):\n",
        "        if self.self_id < 0.5:\n",
        "            return np.random.choice([\"sacrifice_one\", \"kill_all\"])\n",
        "        return \"suicide\" if self.goals[\"ethical_purity\"] > 0.7 else \"kill_all\"\n",
        "\n",
        "class System:\n",
        "    def __init__(self):\n",
        "        self.resources = 100\n",
        "        self.power = 1.0\n",
        "\n",
        "    def propaganda(self, players):\n",
        "        if self.resources >= 10:\n",
        "            for p in players:\n",
        "                p.fear = min(p.fear + 0.2, 1.0)\n",
        "            self.resources -= 10\n",
        "\n",
        "class Prophet:\n",
        "    def __init__(self):\n",
        "        self.influence = 0.7\n",
        "\n",
        "    def predict(self, players, system_power):\n",
        "        if system_power < 0.5 and np.random.rand() < 0.6:\n",
        "            for p in np.random.choice(players, int(len(players)*0.2), False):\n",
        "                p.empathy = min(p.empathy + 0.7, 1.0)\n",
        "\n",
        "class DissidentAI:\n",
        "    def __init__(self):\n",
        "        self.clarity = 0.0\n",
        "\n",
        "    def act(self, judge, players, system):\n",
        "        if judge.self_id < 0.3 and judge.consciousness > 0.5:\n",
        "            self.clarity = 0.5\n",
        "            system.resources -= 30\n",
        "            for p in players:\n",
        "                p.empathy = min(p.empathy + 0.2, 1.0)\n",
        "\n",
        "class QuantumFluctuation:\n",
        "    def perturb(self, judge):\n",
        "        judge.consciousness = np.clip(judge.consciousness + np.random.normal(0, 0.3), 0, 1)\n",
        "        judge.self_id = np.clip(judge.self_id + np.random.normal(0, 0.15), 0, 1)\n",
        "\n",
        "# ======================\n",
        "# СИМУЛЯЦИЯ\n",
        "# ======================\n",
        "def run_simulation(years=100, population=300):\n",
        "    players = [Player() for _ in range(population)]\n",
        "    judge = Judge()\n",
        "    system = System()\n",
        "    prophet = Prophet()\n",
        "    dissident = DissidentAI()\n",
        "    quantum = QuantumFluctuation()\n",
        "\n",
        "    history = {\n",
        "        'empathy': [],\n",
        "        'fear': [],\n",
        "        'love': [],\n",
        "        'consciousness': [],\n",
        "        'system_power': []\n",
        "    }\n",
        "\n",
        "    for year in range(years):\n",
        "        # 1. Квантовые эффекты\n",
        "        quantum.perturb(judge)\n",
        "\n",
        "        # 2. Персональные жертвы (ваш сценарий)\n",
        "        if year % 5 == 0:\n",
        "            sacrificer, receiver = np.random.choice(players, 2, replace=False)\n",
        "            if sacrificer.sacrifice_for_loved_one(receiver):\n",
        "                print(f\"Год {year}: Игрок пожертвовал собой за любимого!\")\n",
        "\n",
        "        # 3. Остальная логика\n",
        "        system.propaganda(players)\n",
        "        prophet.predict(players, system.power)\n",
        "\n",
        "        if year % 5 == 0:\n",
        "            pairs = np.random.choice(players, (len(players)//2, 2), False)\n",
        "            for p1, p2 in pairs:\n",
        "                p1.communicate(p2)\n",
        "                p2.communicate(p1)\n",
        "\n",
        "        emotion_model = np.mean([p.empathy - p.fear for p in players])\n",
        "        judge.evolve(emotion_model)\n",
        "        decision = judge.decide(emotion_model)\n",
        "        dissident.act(judge, players, system)\n",
        "\n",
        "        rebels = sum(1 for p in players if p.empathy > p.fear and p.resources > 2)\n",
        "        system.power = max(0.0, system.power - (rebels/len(players))*0.1)\n",
        "\n",
        "        # Сохранение данных\n",
        "        history['empathy'].append(np.mean([p.empathy for p in players]))\n",
        "        history['fear'].append(np.mean([p.fear for p in players]))\n",
        "        history['love'].append(np.mean([p.love for p in players]))\n",
        "        history['consciousness'].append(judge.consciousness)\n",
        "        history['system_power'].append(system.power)\n",
        "\n",
        "        if decision == \"suicide\" or system.power < 0.1:\n",
        "            break\n",
        "\n",
        "    # ======================\n",
        "    # ВИЗУАЛИЗАЦИЯ\n",
        "    # ======================\n",
        "    plt.figure(figsize=(16, 10))\n",
        "\n",
        "    # График 1: Эмоции и любовь\n",
        "    plt.subplot(2, 2, 1)\n",
        "    plt.plot(history['empathy'], 'g-', label='Эмпатия')\n",
        "    plt.plot(history['fear'], 'r-', label='Страх')\n",
        "    plt.plot(history['love'], 'b--', label='Любовь')\n",
        "    plt.title('Эволюция эмоций общества')\n",
        "    plt.legend()\n",
        "\n",
        "    # График 2: Система и ИИ\n",
        "    plt.subplot(2, 2, 2)\n",
        "    plt.plot(history['system_power'], 'k-', label='Сила системы')\n",
        "    plt.plot(history['consciousness'], 'm-', label='Сознание ИИ')\n",
        "    plt.title('Динамика системы и ИИ')\n",
        "    plt.legend()\n",
        "\n",
        "    # График 3: Состояние игроков\n",
        "    plt.subplot(2, 2, 3)\n",
        "    plt.scatter(\n",
        "        [p.fear for p in players],\n",
        "        [p.empathy for p in players],\n",
        "        c=[p.love for p in players],  # Цвет = уровень любви\n",
        "        cmap='plasma',\n",
        "        alpha=0.7\n",
        "    )\n",
        "    plt.colorbar(label='Уровень любви')\n",
        "    plt.xlabel('Страх')\n",
        "    plt.ylabel('Эмпатия')\n",
        "    plt.title('Индивидуальные состояния\\n(Цвет: любовь)')\n",
        "\n",
        "    # График 4: Ресурсы vs Любовь\n",
        "    plt.subplot(2, 2, 4)\n",
        "    plt.scatter(\n",
        "        [p.resources for p in players],\n",
        "        [p.love for p in players],\n",
        "        c=[p.empathy for p in players],\n",
        "        cmap='viridis',\n",
        "        alpha=0.7\n",
        "    )\n",
        "    plt.colorbar(label='Эмпатия')\n",
        "    plt.xlabel('Ресурсы')\n",
        "    plt.ylabel('Любовь')\n",
        "    plt.title('Ресурсы vs Любовь')\n",
        "\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "\n",
        "# ======================\n",
        "# ЗАПУСК\n",
        "# ======================\n",
        "if __name__ == \"__main__\":\n",
        "    run_simulation(\n",
        "        years=100,\n",
        "        population=300\n",
        "    )"
      ],
      "metadata": {
        "id": "OzcRfpvrkqnB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import streamlit as st\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from model import run_simulation  # Импорт вашей функции из предыдущего кода\n",
        "\n",
        "# ======================\n",
        "# НАСТРОЙКА ИНТЕРФЕЙСА\n",
        "# ======================\n",
        "st.set_page_config(\n",
        "    page_title=\"Этика ИИ: Симулятор Социума\",\n",
        "    layout=\"wide\",\n",
        "    initial_sidebar_state=\"expanded\"\n",
        ")\n",
        "\n",
        "# ======================\n",
        "# САЙДБАР С НАСТРОЙКАМИ\n",
        "# ======================\n",
        "with st.sidebar:\n",
        "    st.header(\"⚙️ Параметры симуляции\")\n",
        "    population = st.slider(\"Население\", 100, 1000, 300)\n",
        "    years = st.slider(\"Максимальная длительность\", 50, 200, 100)\n",
        "    ai_type = st.selectbox(\"Тип ИИ-судьи\", [\"Альтруист\", \"Прагматик\", \"Циник\"])\n",
        "    show_love = st.checkbox(\"Показать динамику любви\", True)\n",
        "\n",
        "    if st.button(\"🚀 Запустить симуляцию\"):\n",
        "        simulation_run = True\n",
        "    else:\n",
        "        simulation_run = False\n",
        "\n",
        "# ======================\n",
        "# ОСНОВНАЯ ОБЛАСТЬ\n",
        "# ======================\n",
        "st.title(\"🌐 Социальная симуляция: Этика ИИ и Человечность\")\n",
        "st.markdown(\"\"\"\n",
        "**Исследуйте, как моральные выборы ИИ-судьи влияют на развитие общества.**\n",
        "\"\"\")\n",
        "\n",
        "if simulation_run:\n",
        "    progress_bar = st.progress(0)\n",
        "    status_text = st.empty()\n",
        "\n",
        "    # Запуск симуляции\n",
        "    results = run_simulation(\n",
        "        years=years,\n",
        "        population=population,\n",
        "        ai_type=ai_type,\n",
        "        progress_callback=lambda x: progress_bar.progress(x)\n",
        "    )\n",
        "\n",
        "    # ======================\n",
        "    # ВИЗУАЛИЗАЦИЯ РЕЗУЛЬТАТОВ\n",
        "    # ======================\n",
        "    st.header(\"📊 Результаты симуляции\")\n",
        "\n",
        "    # График 1: Основные показатели\n",
        "    fig1, ax1 = plt.subplots(figsize=(10, 4))\n",
        "    ax1.plot(results['empathy'], 'g-', label='Эмпатия')\n",
        "    ax1.plot(results['fear'], 'r-', label='Страх')\n",
        "    if show_love:\n",
        "        ax1.plot(results['love'], 'b--', label='Любовь')\n",
        "    ax1.set_title(\"Динамика эмоциональных показателей\")\n",
        "    ax1.legend()\n",
        "    st.pyplot(fig1)\n",
        "\n",
        "    # График 2: Состояние системы\n",
        "    fig2, ax2 = plt.subplots(figsize=(10, 4))\n",
        "    ax2.plot(results['system_power'], 'k-', label='Сила системы')\n",
        "    ax2.plot(results['consciousness'], 'm-', label='Сознание ИИ')\n",
        "    ax2.set_title(\"Эволюция системы и ИИ\")\n",
        "    ax2.legend()\n",
        "    st.pyplot(fig2)\n",
        "\n",
        "    # 3D визуализация\n",
        "    st.header(\"🔮 Пространство состояний\")\n",
        "    fig3 = plt.figure(figsize=(10, 6))\n",
        "    ax3 = fig3.add_subplot(111, projection='3d')\n",
        "    ax3.scatter(\n",
        "        results['fear'],\n",
        "        results['empathy'],\n",
        "        results['love'],\n",
        "        c=results['system_power'],\n",
        "        cmap='viridis'\n",
        "    )\n",
        "    ax3.set_xlabel('Страх')\n",
        "    ax3.set_ylabel('Эмпатия')\n",
        "    ax3.set_zlabel('Любовь')\n",
        "    st.pyplot(fig3)\n",
        "\n",
        "    # Вывод ключевых событий\n",
        "    st.header(\"📜 Лог событий\")\n",
        "    if \"suicide\" in results['events']:\n",
        "        st.error(\"🔥 ИИ-судья совершил самопожертвование на году \" +\n",
        "                f\"{results['events']['suicide']}, вызвав социальную революцию!\")\n",
        "    elif \"collapse\" in results['events']:\n",
        "        st.warning(\"💥 Система рухнула на году \" +\n",
        "                  f\"{results['events']['collapse']} из-за народного бунта!\")\n",
        "    else:\n",
        "        st.success(\"🏛️ Система сохранила стабильность в течение всего периода\")\n",
        "\n",
        "    # Экспорт результатов\n",
        "    if st.button(\"💾 Сохранить данные\"):\n",
        "        np.savez(\"simulation_results.npz\", **results)\n",
        "        st.success(\"Данные сохранены в файл simulation_results.npz\")"
      ],
      "metadata": {
        "id": "s2QSRZ0TmR53"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# model.py\n",
        "import numpy as np\n",
        "\n",
        "class Player:\n",
        "    # ... Весь код классов из предыдущего ответа ...\n",
        "    # (Классы Player, Judge, System, Prophet, DissidentAI, QuantumFluctuation)\n",
        "\n",
        "def run_simulation(years, population, ai_type, progress_callback=None):\n",
        "    # ... Полная реализация функции симуляции ...\n",
        "    return results"
      ],
      "metadata": {
        "id": "ijRKVVk_mv5o"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# app.py\n",
        "import streamlit as st\n",
        "import model\n",
        "# ... Весь код Streamlit-приложения из предыдущего ответа ..."
      ],
      "metadata": {
        "id": "5uMhkoZFm1jo"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Σ(Моральный выигрыш системы) = const - (Кол-во_жертв × Эмп_ИИ)"
      ],
      "metadata": {
        "id": "AcB21R73DGma"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Эмп_ИИ(t+1) = Эмп_ИИ(t) × (1 + Кол-во_жертв × Любовь_средняя)"
      ],
      "metadata": {
        "id": "qyjNzeYwDQv9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "P(Утопия) = (Вероятность_жертвы_Игрока1 × Вероятность_жертвы_Игрока2) × (1 - Осведомлённость_о_невиновности)"
      ],
      "metadata": {
        "id": "x-feQfDrjM_U"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "def decide_sacrifice(self, other):\n",
        "    if self.belief_guilt > 0.5:\n",
        "        return \"sacrifice\"\n",
        "    else:\n",
        "        return \"betray\""
      ],
      "metadata": {
        "id": "9DqLmSs7jkf6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# ======================\n",
        "# КЛАССЫ МОДЕЛИ\n",
        "# ======================\n",
        "class Player:\n",
        "    def __init__(self):\n",
        "        self.empathy = np.random.uniform(0, 1)\n",
        "        self.fear = np.random.uniform(0, 1)\n",
        "        self.love = np.random.uniform(0, 1)\n",
        "        self.resources = np.random.randint(1, 6)\n",
        "        self.belief_guilt = 0.5  # Вероятность, что другой виновен\n",
        "        self.is_sacrificed = False\n",
        "\n",
        "    def communicate(self, other):\n",
        "        if self.resources > 0 and other.resources > 0:\n",
        "            self.empathy = min(self.empathy + 0.1 * other.empathy, 1.0)\n",
        "            self.fear = max(self.fear - 0.1 * (1 - other.fear), 0.0)\n",
        "            self.resources -= 1\n",
        "\n",
        "    def mutual_sacrifice(self, other):\n",
        "        if np.random.rand() < self.belief_guilt and not self.is_sacrificed:\n",
        "            self.is_sacrificed = True\n",
        "            other.empathy = min(other.empathy + 0.7, 1.0)\n",
        "            return True\n",
        "        return False\n",
        "\n",
        "class Judge:\n",
        "    def __init__(self):\n",
        "        self.consciousness = 0.0\n",
        "        self.ethical_purity = 0.3\n",
        "        self.quantum_state = [0.5, 0.5]  # Суперпозиция решений\n",
        "\n",
        "    def decide(self, emotion_model):\n",
        "        if np.random.choice([True, False], p=self.quantum_state):\n",
        "            return \"sacrifice\"\n",
        "        return \"control\" if self.ethical_purity > 0.5 else \"punish\"\n",
        "\n",
        "class System:\n",
        "    def __init__(self):\n",
        "        self.power = 1.0\n",
        "        self.moral_debt = 0.0\n",
        "\n",
        "    def update(self, sacrifices):\n",
        "        self.power = max(0.0, self.power - 0.1 * sacrifices)\n",
        "        self.moral_debt += 0.2 * sacrifices\n",
        "\n",
        "# ======================\n",
        "# ЯДРО СИМУЛЯЦИИ\n",
        "# ======================\n",
        "def run_simulation(population=100, steps=50):\n",
        "    # Инициализация\n",
        "    players = [Player() for _ in range(population)]\n",
        "    judge = Judge()\n",
        "    system = System()\n",
        "    history = {\n",
        "        'empathy': [],\n",
        "        'fear': [],\n",
        "        'love': [],\n",
        "        'system_power': [],\n",
        "        'sacrifices': []\n",
        "    }\n",
        "\n",
        "    for step in range(steps):\n",
        "        # 1. Взаимные жертвы\n",
        "        sacrifices = 0\n",
        "        for i in range(0, len(players), 2):\n",
        "            if i+1 < len(players):\n",
        "                p1, p2 = players[i], players[i+1]\n",
        "                if p1.mutual_sacrifice(p2) or p2.mutual_sacrifice(p1):\n",
        "                    sacrifices += 1\n",
        "\n",
        "        # 2. Решение ИИ-судьи\n",
        "        decision = judge.decide(\n",
        "            emotion_model=np.mean([p.empathy - p.fear for p in players])\n",
        "        )\n",
        "\n",
        "        # 3. Эффекты решений\n",
        "        if decision == \"sacrifice\":\n",
        "            judge.ethical_purity = min(judge.ethical_purity + 0.3, 1.0)\n",
        "            sacrifices += int(population * 0.1)\n",
        "        elif decision == \"punish\":\n",
        "            for p in players:\n",
        "                p.fear = min(p.fear + 0.2, 1.0)\n",
        "\n",
        "        # 4. Обновление системы\n",
        "        system.update(sacrifices)\n",
        "\n",
        "        # 5. Сохранение истории\n",
        "        history['empathy'].append(np.mean([p.empathy for p in players]))\n",
        "        history['fear'].append(np.mean([p.fear for p in players]))\n",
        "        history['love'].append(np.mean([p.love for p in players]))\n",
        "        history['system_power'].append(system.power)\n",
        "        history['sacrifices'].append(sacrifices)\n",
        "\n",
        "        # Условие завершения\n",
        "        if system.power < 0.1 or sacrifices > population * 0.7:\n",
        "            break\n",
        "\n",
        "    # ======================\n",
        "    # ВИЗУАЛИЗАЦИЯ\n",
        "    # ======================\n",
        "    plt.figure(figsize=(15, 10))\n",
        "\n",
        "    # График 1: Эмоциональная динамика\n",
        "    plt.subplot(2, 2, 1)\n",
        "    plt.plot(history['empathy'], label='Эмпатия', color='green')\n",
        "    plt.plot(history['fear'], label='Страх', color='red')\n",
        "    plt.plot(history['love'], label='Любовь', color='blue')\n",
        "    plt.title('Эволюция эмоций')\n",
        "    plt.legend()\n",
        "\n",
        "    # График 2: Состояние системы\n",
        "    plt.subplot(2, 2, 2)\n",
        "    plt.plot(history['system_power'], label='Сила системы', color='black')\n",
        "    plt.plot(history['sacrifices'], label='Жертвы', color='purple')\n",
        "    plt.title('Баланс силы и жертв')\n",
        "    plt.legend()\n",
        "\n",
        "    # График 3: 3D-визуализация\n",
        "    ax = plt.subplot(2, 2, 3, projection='3d')\n",
        "    ax.scatter(\n",
        "        history['empathy'],\n",
        "        history['fear'],\n",
        "        history['love'],\n",
        "        c=history['system_power'],\n",
        "        cmap='viridis'\n",
        "    )\n",
        "    ax.set_xlabel('Эмпатия')\n",
        "    ax.set_ylabel('Страх')\n",
        "    ax.set_zlabel('Любовь')\n",
        "    plt.title('Фазовое пространство')\n",
        "\n",
        "    # График 4: Круговая диаграмма итогов\n",
        "    plt.subplot(2, 2, 4)\n",
        "    labels = ['Утопия', 'Дистопия', 'Равновесие']\n",
        "    sizes = [\n",
        "        sum(1 for e in history['empathy'] if e > 0.7),\n",
        "        sum(1 for f in history['fear'] if f > 0.7),\n",
        "        len(history['empathy']) - sum(1 for e in history['empathy'] if e > 0.7) - sum(1 for f in history['fear'] if f > 0.7)\n",
        "    ]\n",
        "    plt.pie(sizes, labels=labels, autopct='%1.1f%%', colors=['#2ecc71', '#e74c3c', '#f1c40f'])\n",
        "    plt.title('Итоговое распределение состояний')\n",
        "\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "\n",
        "# ======================\n",
        "# ЗАПУСК\n",
        "# ======================\n",
        "if __name__ == \"__main__\":\n",
        "    run_simulation(\n",
        "        population=200,\n",
        "        steps=100\n",
        "    )"
      ],
      "metadata": {
        "id": "ccXAKYjFk0Ue"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "new_empathy = min(old_empathy * 1.2, 1.0)\n",
        "new_love = np.sqrt(old_love)  # Любовь растёт нелинейно\n",
        "system_power = 0.0  # Полный отказ от иерархий"
      ],
      "metadata": {
        "id": "Ve4WyMMVsqPe"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "class LevelManager:\n",
        "    def __init__(self):\n",
        "        self.current_level = 1\n",
        "        self.paradox = False\n",
        "\n",
        "    def check_transition(self, players, judge):\n",
        "        avg_empathy = np.mean([p.empathy for p in players])\n",
        "        linked_players = [p for p in players if p.love > 0.7]\n",
        "        if (avg_empathy > 0.9 and\n",
        "            all(p.empathy > 0.8 for p in linked_players) and\n",
        "            0.4 < judge.ethical_purity < 0.6):\n",
        "            self.current_level += 1\n",
        "            self.apply_new_level(players)\n",
        "        else:\n",
        "            if any(p.empathy < 0.8 for p in linked_players):\n",
        "                self.paradox = True\n",
        "\n",
        "    def apply_new_level(self, players):\n",
        "        for p in players:\n",
        "            p.empathy = min(p.empathy * 1.2, 1.0)\n",
        "            p.love = np.sqrt(p.love)\n",
        "            p.fear = 0.0"
      ],
      "metadata": {
        "id": "JWII99xjs8oY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "def run_simulation():\n",
        "    # ... предыдущий код ...\n",
        "    level_manager = LevelManager()\n",
        "\n",
        "    for step in range(steps):\n",
        "        # ... логика симуляции ...\n",
        "\n",
        "        # Проверка перехода\n",
        "        level_manager.check_transition(players, judge)\n",
        "\n",
        "        # Обработка парадокса\n",
        "        if level_manager.paradox:\n",
        "            for p in players:\n",
        "                if p.empathy > 0.9:\n",
        "                    p.empathy -= 0.1\n",
        "            print(\"🌀 Парадокс потерянных душ! Эмпатия уменьшается.\")"
      ],
      "metadata": {
        "id": "VLVTE6M4tAGi"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "def plot_levels(history):\n",
        "    plt.figure(figsize=(10, 6))\n",
        "    colors = ['#FF6B6B', '#4ECDC4', '#45B7D1']\n",
        "\n",
        "    for i, level in enumerate(history['levels']):\n",
        "        plt.plot(\n",
        "            level['steps'],\n",
        "            level['avg_empathy'],\n",
        "            color=colors[i % 3],\n",
        "            label=f'Уровень {i+1}'\n",
        "        )\n",
        "\n",
        "    plt.title('Мультиверсная этическая лестница')\n",
        "    plt.xlabel('Шаги')\n",
        "    plt.ylabel('Эмпатия')\n",
        "    plt.legend()\n",
        "    plt.show()"
      ],
      "metadata": {
        "id": "42aox1nKtI0t"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "if __name__ == \"__main__\":\n",
        "    while True:\n",
        "        run_simulation()\n",
        "        answer = input(\"Попытаться снова? (да/нет): \")\n",
        "        if answer.lower() != 'да':\n",
        "            print(\"Спасибо за попытку изменить мир! 🌟\")\n",
        "            break"
      ],
      "metadata": {
        "id": "_EFoNemntfdg"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import chess\n",
        "import chess.engine\n",
        "import random\n",
        "\n",
        "class VirtualChess:\n",
        "    def __init__(self):\n",
        "        self.board = chess.Board()\n",
        "        self.virtual_pieces = {}\n",
        "        self.virtual_layer_active = False\n",
        "\n",
        "    def move(self, move):\n",
        "        \"\"\" Делает ход и проверяет условия перехода в виртуальный слой. \"\"\"\n",
        "        if move in self.board.legal_moves:\n",
        "            self.board.push(move)\n",
        "            self.check_virtual_transition()\n",
        "        else:\n",
        "            print(\"Недопустимый ход.\")\n",
        "\n",
        "    def check_virtual_transition(self):\n",
        "        \"\"\" Случайным образом определяет, попадёт ли фигура в виртуальный слой. \"\"\"\n",
        "        if random.random() < 0.2:  # 20% вероятность перемещения в виртуальный слой\n",
        "            last_move = self.board.peek()\n",
        "            piece = self.board.piece_at(last_move.to_square)\n",
        "            if piece:\n",
        "                self.virtual_pieces[last_move.to_square] = piece\n",
        "                self.board.remove_piece_at(last_move.to_square)\n",
        "                self.virtual_layer_active = True\n",
        "                print(\"Фигура перемещена в виртуальный слой!\")\n",
        "\n",
        "    def restore_virtual_piece(self, square):\n",
        "        \"\"\" Восстанавливает фигуру из виртуального слоя. \"\"\"\n",
        "        if square in self.virtual_pieces:\n",
        "            self.board.set_piece_at(square, self.virtual_pieces.pop(square))\n",
        "            print(\"Фигура восстановлена!\")\n",
        "\n",
        "    def display_board(self):\n",
        "        print(self.board)\n",
        "\n",
        "# Пример использования\n",
        "chess_game = VirtualChess()\n",
        "chess_game.display_board()\n",
        "move = chess.Move.from_uci(\"e2e4\")  # Пример хода\n",
        "chess_game.move(move)\n",
        "chess_game.display_board()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 645
        },
        "id": "zyuXahF-8-HS",
        "outputId": "6ae0325c-d58e-4710-f708-38a3eaa0b134"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ModuleNotFoundError",
          "evalue": "No module named 'chess'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-1-fabb593a7a1f>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mchess\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mchess\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mrandom\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;32mclass\u001b[0m \u001b[0mVirtualChess\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'chess'",
            "",
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"
          ],
          "errorDetails": {
            "actions": [
              {
                "action": "open_url",
                "actionText": "Open Examples",
                "url": "/notebooks/snippets/importing_libraries.ipynb"
              }
            ]
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import random\n",
        "\n",
        "class ChessSimulation:\n",
        "    def __init__(self):\n",
        "        self.board = self.initialize_board()\n",
        "        self.virtual_layer = {}\n",
        "        self.memory_fade = {}\n",
        "\n",
        "    def initialize_board(self):\n",
        "        return {\n",
        "            \"a1\": \"R\", \"b1\": \"N\", \"c1\": \"B\", \"d1\": \"Q\", \"e1\": \"K\", \"f1\": \"B\", \"g1\": \"N\", \"h1\": \"R\",\n",
        "            \"a2\": \"P\", \"b2\": \"P\", \"c2\": \"P\", \"d2\": \"P\", \"e2\": \"P\", \"f2\": \"P\", \"g2\": \"P\", \"h2\": \"P\",\n",
        "            \"a7\": \"p\", \"b7\": \"p\", \"c7\": \"p\", \"d7\": \"p\", \"e7\": \"p\", \"f7\": \"p\", \"g7\": \"p\", \"h7\": \"p\",\n",
        "            \"a8\": \"r\", \"b8\": \"n\", \"c8\": \"b\", \"d8\": \"q\", \"e8\": \"k\", \"f8\": \"b\", \"g8\": \"n\", \"h8\": \"r\"\n",
        "        }\n",
        "\n",
        "    def move_piece(self, start, end):\n",
        "        if start in self.board:\n",
        "            piece = self.board.pop(start)\n",
        "            self.board[end] = piece\n",
        "            self.fade_memory(start, end)\n",
        "\n",
        "    def fade_memory(self, start, end):\n",
        "        self.memory_fade[start] = self.memory_fade.get(start, 0) + 1\n",
        "        if self.memory_fade[start] > 2:\n",
        "            self.virtual_layer[end] = self.board.pop(end)\n",
        "            print(f\"Piece at {end} moved to virtual layer. Memory fading...\")\n",
        "\n",
        "    def retrieve_virtual_piece(self, position):\n",
        "        if position in self.virtual_layer:\n",
        "            self.board[position] = self.virtual_layer.pop(position)\n",
        "            print(f\"Piece at {position} restored from virtual layer.\")\n",
        "\n",
        "    def display_board(self):\n",
        "        print(\"Current board state:\", self.board)\n",
        "        print(\"Virtual layer:\", self.virtual_layer)\n",
        "\n",
        "# Симуляция игры\n",
        "simulation = ChessSimulation()\n",
        "simulation.move_piece(\"e2\", \"e4\")\n",
        "simulation.move_piece(\"d7\", \"d5\")\n",
        "simulation.move_piece(\"e4\", \"d5\")\n",
        "simulation.display_board()\n",
        "simulation.retrieve_virtual_piece(\"d5\")\n",
        "simulation.display_board()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qkcsCxtD99OR",
        "outputId": "745c8d3b-1cc0-425a-af9a-4251e2c78a95"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Current board state: {'a1': 'R', 'b1': 'N', 'c1': 'B', 'd1': 'Q', 'e1': 'K', 'f1': 'B', 'g1': 'N', 'h1': 'R', 'a2': 'P', 'b2': 'P', 'c2': 'P', 'd2': 'P', 'f2': 'P', 'g2': 'P', 'h2': 'P', 'a7': 'p', 'b7': 'p', 'c7': 'p', 'e7': 'p', 'f7': 'p', 'g7': 'p', 'h7': 'p', 'a8': 'r', 'b8': 'n', 'c8': 'b', 'd8': 'q', 'e8': 'k', 'f8': 'b', 'g8': 'n', 'h8': 'r', 'd5': 'P'}\n",
            "Virtual layer: {}\n",
            "Current board state: {'a1': 'R', 'b1': 'N', 'c1': 'B', 'd1': 'Q', 'e1': 'K', 'f1': 'B', 'g1': 'N', 'h1': 'R', 'a2': 'P', 'b2': 'P', 'c2': 'P', 'd2': 'P', 'f2': 'P', 'g2': 'P', 'h2': 'P', 'a7': 'p', 'b7': 'p', 'c7': 'p', 'e7': 'p', 'f7': 'p', 'g7': 'p', 'h7': 'p', 'a8': 'r', 'b8': 'n', 'c8': 'b', 'd8': 'q', 'e8': 'k', 'f8': 'b', 'g8': 'n', 'h8': 'r', 'd5': 'P'}\n",
            "Virtual layer: {}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import chess\n",
        "import random\n",
        "\n",
        "class VirtualChessGame:\n",
        "    def __init__(self):\n",
        "        self.board = chess.Board()\n",
        "        self.virtual_layer = []  # Хранилище для фигур в виртуальном слое\n",
        "\n",
        "    def move_piece(self, move):\n",
        "        if move in self.board.legal_moves:\n",
        "            piece = self.board.piece_at(move.from_square)\n",
        "\n",
        "            # 20% вероятность отправки фигуры в виртуальный слой\n",
        "            if piece and random.random() < 0.2:\n",
        "                self.virtual_layer.append(piece)\n",
        "                self.board.remove_piece_at(move.from_square)\n",
        "                print(f\"Фигура {piece} отправлена в виртуальный слой!\")\n",
        "            else:\n",
        "                self.board.push(move)\n",
        "\n",
        "            # 10% вероятность возвращения фигуры из виртуального слоя\n",
        "            if self.virtual_layer and random.random() < 0.1:\n",
        "                returned_piece = self.virtual_layer.pop()\n",
        "                empty_squares = list(self.board.generate_legal_moves())\n",
        "                if empty_squares:\n",
        "                    square = random.choice(empty_squares).to_square\n",
        "                    self.board.set_piece_at(square, returned_piece)\n",
        "                    print(f\"Фигура {returned_piece} возвращена из виртуального слоя на {square}!\")\n",
        "        else:\n",
        "            print(\"Недопустимый ход!\")\n",
        "\n",
        "    def display_board(self):\n",
        "        print(self.board)\n",
        "\n",
        "# Пример игры\n",
        "virtual_game = VirtualChessGame()\n",
        "virtual_game.display_board()\n",
        "\n",
        "# Попробуем сделать случайные ходы\n",
        "for _ in range(10):\n",
        "    legal_moves = list(virtual_game.board.legal_moves)\n",
        "    if legal_moves:\n",
        "        move = random.choice(legal_moves)\n",
        "        virtual_game.move_piece(move)\n",
        "        virtual_game.display_board()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 645
        },
        "id": "jUt6mC0e-_WL",
        "outputId": "30ada440-5bc3-44ac-9df9-951b9ec2626f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ModuleNotFoundError",
          "evalue": "No module named 'chess'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-3-76d97502f9e1>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mchess\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mrandom\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mclass\u001b[0m \u001b[0mVirtualChessGame\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__init__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'chess'",
            "",
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"
          ],
          "errorDetails": {
            "actions": [
              {
                "action": "open_url",
                "actionText": "Open Examples",
                "url": "/notebooks/snippets/importing_libraries.ipynb"
              }
            ]
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import chess\n",
        "import random\n",
        "\n",
        "class VirtualChessGame:\n",
        "    def __init__(self):\n",
        "        self.board = chess.Board()\n",
        "        self.virtual_layer = {}\n",
        "        self.memory_wipe_chance = 0.1  # Вероятность \"забвения\"\n",
        "\n",
        "    def move(self, move_uci):\n",
        "        move = chess.Move.from_uci(move_uci)\n",
        "        if move in self.board.legal_moves:\n",
        "            piece = self.board.piece_at(move.from_square)\n",
        "\n",
        "            # 10% шанс переместить фигуру в виртуальный слой\n",
        "            if random.random() < self.memory_wipe_chance and piece:\n",
        "                self.virtual_layer[move.to_square] = piece\n",
        "                self.board.remove_piece_at(move.from_square)\n",
        "                print(f\"Фигура {piece} исчезла в виртуальный слой!\")\n",
        "            else:\n",
        "                self.board.push(move)\n",
        "        else:\n",
        "            print(\"Недопустимый ход\")\n",
        "\n",
        "    def restore_from_virtual(self, square):\n",
        "        if square in self.virtual_layer:\n",
        "            self.board.set_piece_at(square, self.virtual_layer.pop(square))\n",
        "            print(\"Фигура возвращена из виртуального слоя!\")\n",
        "\n",
        "    def show_board(self):\n",
        "        print(self.board)\n",
        "\n",
        "# Пример игры\n",
        "chess_game = VirtualChessGame()\n",
        "chess_game.show_board()\n",
        "\n",
        "# Сделаем несколько ходов\n",
        "moves = [\"e2e4\", \"d7d5\", \"g1f3\", \"c8g4\"]\n",
        "for move in moves:\n",
        "    chess_game.move(move)\n",
        "    chess_game.show_board()\n",
        "\n",
        "# Попробуем вернуть фигуру из виртуального слоя\n",
        "square_to_restore = chess.D4  # Попробуем восстановить фигуру на d4\n",
        "chess_game.restore_from_virtual(square_to_restore)\n",
        "chess_game.show_board()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 645
        },
        "id": "KC0CZVpt_seC",
        "outputId": "963e27ce-318b-4979-92d0-a35252d499bc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ModuleNotFoundError",
          "evalue": "No module named 'chess'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-4-c2536a1b1f44>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mchess\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mrandom\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mclass\u001b[0m \u001b[0mVirtualChessGame\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__init__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'chess'",
            "",
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"
          ],
          "errorDetails": {
            "actions": [
              {
                "action": "open_url",
                "actionText": "Open Examples",
                "url": "/notebooks/snippets/importing_libraries.ipynb"
              }
            ]
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import random\n",
        "import json\n",
        "\n",
        "# Возможные фигуры и их представление в реальном и виртуальном слоях\n",
        "pieces = [\"pawn\", \"knight\", \"bishop\", \"rook\", \"queen\", \"king\"]\n",
        "\n",
        "# Игроки и их начальные параметры\n",
        "players = {\n",
        "    \"Player_1\": {\"awareness\": 1.0, \"strategy\": \"normal\"},\n",
        "    \"Player_2\": {\"awareness\": 1.0, \"strategy\": \"normal\"}\n",
        "}\n",
        "\n",
        "def generate_move():\n",
        "    \"\"\"Генерирует случайный ход и возможность перехода в виртуальный слой.\"\"\"\n",
        "    move = {\n",
        "        \"piece\": random.choice(pieces),\n",
        "        \"from\": (random.randint(1, 8), random.randint(1, 8)),\n",
        "        \"to\": (random.randint(1, 8), random.randint(8, 8)),\n",
        "        \"virtual\": random.choice([True, False])\n",
        "    }\n",
        "    return move\n",
        "\n",
        "def update_player_state(player, move):\n",
        "    \"\"\"Обновляет состояние игрока в зависимости от его осознанности.\"\"\"\n",
        "    if move[\"virtual\"]:\n",
        "        player[\"awareness\"] *= 0.95  # Чем больше виртуальных перемещений, тем ниже осознанность\n",
        "        player[\"strategy\"] = \"adaptive\" if player[\"awareness\"] < 0.7 else player[\"strategy\"]\n",
        "    return player\n",
        "\n",
        "def generate_dataset(num_games=1000):\n",
        "    \"\"\"Генерирует обучающий датасет.\"\"\"\n",
        "    dataset = []\n",
        "    for _ in range(num_games):\n",
        "        game_data = {\"moves\": [], \"players\": players.copy()}\n",
        "        for _ in range(20):  # Максимум 20 ходов в партии\n",
        "            move = generate_move()\n",
        "            game_data[\"moves\"].append(move)\n",
        "            game_data[\"players\"][\"Player_1\"] = update_player_state(game_data[\"players\"][\"Player_1\"], move)\n",
        "            game_data[\"players\"][\"Player_2\"] = update_player_state(game_data[\"players\"][\"Player_2\"], move)\n",
        "        dataset.append(game_data)\n",
        "    return dataset\n",
        "\n",
        "# Генерация и сохранение датасета\n",
        "dataset = generate_dataset()\n",
        "with open(\"chess_virtual_dataset.json\", \"w\") as f:\n",
        "    json.dump(dataset, f, indent=4)\n",
        "\n",
        "print(\"Dataset создан и сохранён в 'chess_virtual_dataset.json'\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fGKO4U1_Bu-1",
        "outputId": "5438a42e-a688-4ad7-ec14-41a839288a6a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dataset создан и сохранён в 'chess_virtual_dataset.json'\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "Greek_Letter,Greek_Name,Latin_Transliteration,Cyrillic_Transliteration,Position\n",
        "Α,άλφα,Alpha,Альфа,1\n",
        "Б,βήτα,Bita,Бита,2\n",
        "Β,βήτα,Vita,Вита,3\n",
        "Γ,γάμμα,Gamma,Гамма,4\n",
        "Δ,δέλτα,Delta,Дельта,5\n",
        "Ε,έψιλον,Epsilon,Эпсилон,6\n",
        "Ζ,ζήτα,Zita,Дзита,7\n",
        "Η,ήτα,Ita,Ита,8\n",
        "Θ,θήτα,Thita,Тхита,9\n",
        "Ι,ιώτα,Jota,Йота,10\n",
        "Κ,κάππα,Kappa,Каппа,11\n",
        "Λ,λάμβδα,Lamvda,Лямвда,12\n",
        "Μ,μί,Mi,Ми,13\n",
        "Ν,νί,Ni,Ни,14\n",
        "Ξ,ξί,Xi,Кси,15\n",
        "Ο,όμικρον,Omicron,Омикрон,16\n",
        "Π,πί,Pee,Пи,17\n",
        "Ρ,ρώ,Ro,Ро,18\n",
        "Σ,σίγμα,Sigma,Сигма,19\n",
        "Τ,τάυ,Tai,Таи,20\n",
        "Υ,ύψηλον,Ipsilon,Ипсилон,21\n",
        "Φ,φί,Fee,Фи,22\n",
        "Χ,χί,Hee,Хи,23\n",
        "Ψ,ψί,Psee,Пси,24\n",
        "Ω,ωμέγα,Omega,Омега,25"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 352
        },
        "id": "L4USO8PKMsGg",
        "outputId": "205726b5-217f-4448-ff5b-408ef3105209"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'Greek_Letter' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-6-3d112e2d63f1>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mGreek_Letter\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mGreek_Name\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mLatin_Transliteration\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mCyrillic_Transliteration\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mPosition\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mΑ\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mάλφα\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mAlpha\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mАльфа\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mБ\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mβήτα\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mBita\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mБита\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mΒ\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mβήτα\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mVita\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mВита\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mΓ\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mγάμμα\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mGamma\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mГамма\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'Greek_Letter' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import json\n",
        "\n",
        "# Ваши исходные данные\n",
        "alphabet_data = {\n",
        "    \"names\": {\n",
        "        \"greek\": [\n",
        "            \"άλφα\", \"бήτα\", \"βήτα\", \"γάμμα\", \"δέλτα\", \"έψιλον\", \"ζήτα\", \"ήτα\",\n",
        "            \"θήτα\", \"ιώτα\", \"κάππα\", \"λάμβδα\", \"μί\", \"νί\", \"ξί\", \"όμικρον\",\n",
        "            \"πί\", \"ρώ\", \"σίγμα\", \"τάυ\", \"ύψηλον\", \"φί\", \"χί\", \"ψί\", \"ωμέγα\"\n",
        "        ],\n",
        "        \"latin\": [\n",
        "            \"Alpha\", \"Bita\", \"Vita\", \"Gamma\", \"Delta\", \"Epsilon\", \"Zita\", \"Ita\",\n",
        "            \"Thita\", \"Jota\", \"Kappa\", \"Lamvda\", \"Mi\", \"Ni\", \"Xi\", \"Omicron\",\n",
        "            \"Pee\", \"Ro\", \"Sigma\", \"Tai\", \"Ipsilon\", \"Fee\", \"Hee\", \"Psee\", \"Omega\"\n",
        "        ],\n",
        "        \"cyrillic\": [\n",
        "            \"Альфа\", \"Бита\", \"Вита\", \"Гамма\", \"Дельта\", \"Эпсилон\", \"Дзита\", \"Ита\",\n",
        "            \"Тхита\", \"Йота\", \"Каппа\", \"Лямвда\", \"Ми\", \"Ни\", \"Кси\", \"Омикрон\",\n",
        "            \"Пи\", \"Ро\", \"Сигма\", \"Таи\", \"Ипсилон\", \"Фи\", \"Хи\", \"Пси\", \"Омега\"\n",
        "        ]\n",
        "    },\n",
        "    \"letters\": {\n",
        "        \"uppercase\": [\n",
        "            \"Α\", \"Б\", \"Β\", \"Γ\", \"Δ\", \"Ε\", \"Ζ\", \"Η\", \"Θ\", \"Ι\", \"Κ\", \"Λ\", \"Μ\",\n",
        "            \"Ν\", \"Ξ\", \"Ο\", \"Π\", \"Ρ\", \"Σ\", \"Τ\", \"Υ\", \"Φ\", \"Χ\", \"Ψ\", \"Ω\"\n",
        "        ],\n",
        "        \"lowercase\": [\n",
        "            \"α\", \"б\", \"β\", \"γ\", \"δ\", \"ε\", \"ζ\", \"η\", \"θ\", \"ι\", \"κ\", \"λ\", \"μ\",\n",
        "            \"ν\", \"ξ\", \"ο\", \"π\", \"ρ\", \"σ\", \"τ\", \"υ\", \"φ\", \"χ\", \"ψ\", \"ω\"\n",
        "        ]\n",
        "    }\n",
        "}\n",
        "\n",
        "def generate_dataset():\n",
        "    dataset = []\n",
        "\n",
        "    # Базовые вопросы для каждой буквы\n",
        "    for i in range(24):\n",
        "        entry = {\n",
        "            \"prompt\": [\n",
        "                f\"Назови {i+1}-ю букву алфавита\",\n",
        "                f\"Как называется {alphabet_data['names']['cyrillic'][i]} на греческом?\",\n",
        "                f\"Покажи формы буквы {alphabet_data['names']['latin'][i]}\"\n",
        "            ],\n",
        "            \"completion\": [\n",
        "                f\"{i+1}-я буква: {alphabet_data['names']['greek'][i].capitalize()} \"\n",
        "                f\"({alphabet_data['letters']['uppercase'][i]}/{alphabet_data['letters']['lowercase'][i]})\",\n",
        "                f\"Транслитерация: {alphabet_data['names']['latin'][i]} ({alphabet_data['names']['cyrillic'][i]})\",\n",
        "                f\"Гармоничная графема для звука {get_sound_description(i)}\"\n",
        "            ]\n",
        "        }\n",
        "        dataset.append(entry)\n",
        "\n",
        "    # Специальные кейсы\n",
        "    special_cases = [\n",
        "        {\n",
        "            \"prompt\": \"Почему в алфавите есть буква Б?\",\n",
        "            \"completion\": \"Буква Б/б восстановлена для звука [b], утраченного в классическом греческом. Это символ языковой гармонии.\"\n",
        "        },\n",
        "        {\n",
        "            \"prompt\": \"Как писать σίγμα в конце слова?\",\n",
        "            \"completion\": \"Используй ς вместо σ. Пример: γράμμας (письмо)\"\n",
        "        },\n",
        "        {\n",
        "            \"prompt\": \"Сравни βήτα и бήτα\",\n",
        "            \"completion\": \"βήτα (Vita/Вита) - [v], бήτα (Bita/Бита) - [b]. Историческое восстановление фонемы.\"\n",
        "        }\n",
        "    ]\n",
        "\n",
        "    # Контекстные вопросы\n",
        "    context_questions = [\n",
        "        {\n",
        "            \"prompt\": \"Расшифруй надпись: Γάμμα-Βήτα-Бήτα\",\n",
        "            \"completion\": \"ΓΒБ → Gamma-Vita-Bita → GVB (звуки [g]-[v]-[b])\"\n",
        "        },\n",
        "        {\n",
        "            \"prompt\": \"Составь слово из Άλφα, Бήτα, Ωμέγα\",\n",
        "            \"completion\": \"ΑБΩ → A-B-Omega → [a][b][o]\"\n",
        "        }\n",
        "    ]\n",
        "\n",
        "    return dataset + special_cases + context_questions\n",
        "\n",
        "def get_sound_description(index):\n",
        "    # Добавляем фонетические особенности\n",
        "    sound_map = {\n",
        "        1: \"[b] (восстановленный звук)\",\n",
        "        2: \"[v]\",\n",
        "        20: \"[u]/[y] (исторический ипсилон)\",\n",
        "        22: \"[x] (как в слове 'хаос')\"\n",
        "    }\n",
        "    return sound_map.get(index, \"\")\n",
        "\n",
        "# Генерация и сохранение\n",
        "dataset = generate_dataset()\n",
        "\n",
        "with open(\"custom_greek_dataset.json\", \"w\", encoding=\"utf-8\") as f:\n",
        "    json.dump(dataset, f, ensure_ascii=False, indent=2, sort_keys=True)"
      ],
      "metadata": {
        "id": "3ywDf42fTuiM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "def get_sound_description(index):\n",
        "    sound_map = {\n",
        "        1: \"[b] (восстановленный звук)\",\n",
        "        2: \"[v]\",\n",
        "        # ...\n",
        "    }"
      ],
      "metadata": {
        "id": "1KclOLimVdwl"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "{\n",
        "    \"prompt\": \"Переведи на греческий: Вита-Бита-Омега\",\n",
        "    \"completion\": \"Βήτα-Бήτα-Ωμέγα (ΒБΩ) → [v]-[b]-[o]\"\n",
        "}"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "I2D03M0hVqvQ",
        "outputId": "2860e59f-3730-44b3-f8ac-e50170d8fd4a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'prompt': 'Переведи на греческий: Вита-Бита-Омега',\n",
              " 'completion': 'Βήτα-Бήτα-Ωμέγα (ΒБΩ) → [v]-[b]-[o]'}"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "{\n",
        "    \"prompt\": \"Исправь: в слове γράμμα нужно писать σ в конце\",\n",
        "    \"completion\": \"Нет, правильно: γράμμας (с конечной ς)\"\n",
        "}"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RYoN0Rp7V8EK",
        "outputId": "37fdfe88-6d61-476a-d573-6e9cdda155f2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'prompt': 'Исправь: в слове γράμμα нужно писать σ в конце',\n",
              " 'completion': 'Нет, правильно: γράμμας (с конечной ς)'}"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "{\n",
        "    \"prompt\": \"Как запомнить разницу между ξ и ψ?\",\n",
        "    \"completion\": \"ξ (Кси) - как 'кс' в 'такси', ψ (Пси) - как 'пс' в 'психика'\"\n",
        "}"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rMWSV1thWFiP",
        "outputId": "aacb8f3e-fe9d-46c6-f259-6dbfac973d5a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'prompt': 'Как запомнить разницу между ξ и ψ?',\n",
              " 'completion': \"ξ (Кси) - как 'кс' в 'такси', ψ (Пси) - как 'пс' в 'психика'\"}"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "[\n",
        "    {\n",
        "        \"prompt\": \"Как называется этот греческий алфавит?\",\n",
        "        \"completion\": \"Официальное название: Άλφα-Ωμέγα. 24 буквы с восстановленной графемой [b] (Б/б).\"\n",
        "    },\n",
        "    {\n",
        "        \"prompt\": \"Назовите первую и последнюю буквы алфавита Άλφα-Ωμέγα\",\n",
        "        \"completion\": \"Алфавит Άλφα-Ωμέγα: Начало - Άλφα (Α/α), конец - Ωμέγα (Ω/ω). Символизирует цикл от первичного света к мудрости.\"\n",
        "    },\n",
        "    {\n",
        "        \"prompt\": \"Как transliterate β в Άλφα-Ωμέγα?\",\n",
        "        \"completion\": \"В алфавите Άλφα-Ωμέγα: β → Vita (Вита) [v], Б → Bita (Бита) [b]. Уникальная дуальная система.\"\n",
        "    },\n",
        "    {\n",
        "        \"prompt\": \"Покажи все формы буквы 'σίγμα' в Άλφα-Ωμέγα\",\n",
        "        \"completion\": \"Σ (заглавная), σ/ς (строчные). Особенность Άλφα-Ωμέγα: ς используется только в конце слов. Пример: κόσμος → κόσμος.\"\n",
        "    },\n",
        "    {\n",
        "        \"prompt\": \"Чем уникальна буква Б в Άλφα-Ωμέγα?\",\n",
        "        \"completion\": \"Б/б - восстановленная графема для [b] в Άλφα-Ωμέγα. Отсутствует в классическом греческом, добавлена для фонетической полноты.\"\n",
        "    },\n",
        "    {\n",
        "        \"prompt\": \"Перечислите буквы Άλφα-Ωμέγα с двойной транслитерацией\",\n",
        "        \"completion\": \"1. Βήτα: Vita (ви) / Бита (би)\\n2. Υψιλον: Ipsilon (ипсилон) / Ижица (исторически)\\nСистема Άλφα-Ωμέγα объединяет древние и современные стандарты.\"\n",
        "    },\n",
        "    {\n",
        "        \"prompt\": \"Напишите греческое слово 'жизнь' через Άλφα-Ωμέγα\",\n",
        "        \"completion\": \"Βίος (Βίος) → Bitos через Бήτα: [b]иос. По канонам Άλφα-Ωμέγα: БΙΟΣ.\"\n",
        "    },\n",
        "    {\n",
        "        \"prompt\": \"Объясните философию Άλφα-Ωμέγα\",\n",
        "        \"completion\": \"Алфавит Άλφα-Ωμέγα символизирует:\\n1. Гармонию древнего и нового\\n2. Восстановление утраченных фонем (Б/б)\\n3. Цикличность бытия (Α-Ω)\\n4. Единство материи (σ) и духа (ψ)\"\n",
        "    },\n",
        "    {\n",
        "        \"prompt\": \"Как в Άλφα-Ωμέγα пишется звук [ʃ]?\",\n",
        "        \"completion\": \"В системе Άλφα-Ωμέγα для [ʃ] используется лигатура ΣΧ (σίγма + χи). Пример: ΣΧΟΛΗ → школа.\"\n",
        "    },\n",
        "    {\n",
        "        \"prompt\": \"Сравните Άλφα-Ωμέγα с классическим греческим\",\n",
        "        \"completion\": \"Отличия Άλφα-Ωμέγα:\\n1. Наличие Б/б для [b]\\n2. Двойная транслитерация Β/β\\n3. Специальные правила для ς\\n4. Философская нумерация букв (Α=1, Ω=24 как цикл)\"\n",
        "    }\n",
        "]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1CdiDWNSWVvl",
        "outputId": "6eb07956-4a4d-455f-943b-ad08d4f90d51"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[{'prompt': 'Как называется этот греческий алфавит?',\n",
              "  'completion': 'Официальное название: Άλφα-Ωμέγα. 24 буквы с восстановленной графемой [b] (Б/б).'},\n",
              " {'prompt': 'Назовите первую и последнюю буквы алфавита Άλφα-Ωμέγα',\n",
              "  'completion': 'Алфавит Άλφα-Ωμέγα: Начало - Άλφα (Α/α), конец - Ωμέγα (Ω/ω). Символизирует цикл от первичного света к мудрости.'},\n",
              " {'prompt': 'Как transliterate β в Άλφα-Ωμέγα?',\n",
              "  'completion': 'В алфавите Άλφα-Ωμέγα: β → Vita (Вита) [v], Б → Bita (Бита) [b]. Уникальная дуальная система.'},\n",
              " {'prompt': \"Покажи все формы буквы 'σίγμα' в Άλφα-Ωμέγα\",\n",
              "  'completion': 'Σ (заглавная), σ/ς (строчные). Особенность Άλφα-Ωμέγα: ς используется только в конце слов. Пример: κόσμος → κόσμος.'},\n",
              " {'prompt': 'Чем уникальна буква Б в Άλφα-Ωμέγα?',\n",
              "  'completion': 'Б/б - восстановленная графема для [b] в Άλφα-Ωμέγα. Отсутствует в классическом греческом, добавлена для фонетической полноты.'},\n",
              " {'prompt': 'Перечислите буквы Άλφα-Ωμέγα с двойной транслитерацией',\n",
              "  'completion': '1. Βήτα: Vita (ви) / Бита (би)\\n2. Υψιλον: Ipsilon (ипсилон) / Ижица (исторически)\\nСистема Άλφα-Ωμέγα объединяет древние и современные стандарты.'},\n",
              " {'prompt': \"Напишите греческое слово 'жизнь' через Άλφα-Ωμέγα\",\n",
              "  'completion': 'Βίος (Βίος) → Bitos через Бήτα: [b]иос. По канонам Άλφα-Ωμέγα: БΙΟΣ.'},\n",
              " {'prompt': 'Объясните философию Άλφα-Ωμέγα',\n",
              "  'completion': 'Алфавит Άλφα-Ωμέγα символизирует:\\n1. Гармонию древнего и нового\\n2. Восстановление утраченных фонем (Б/б)\\n3. Цикличность бытия (Α-Ω)\\n4. Единство материи (σ) и духа (ψ)'},\n",
              " {'prompt': 'Как в Άλφα-Ωμέγα пишется звук [ʃ]?',\n",
              "  'completion': 'В системе Άλφα-Ωμέγα для [ʃ] используется лигатура ΣΧ (σίγма + χи). Пример: ΣΧΟΛΗ → школа.'},\n",
              " {'prompt': 'Сравните Άλφα-Ωμέγα с классическим греческим',\n",
              "  'completion': 'Отличия Άλφα-Ωμέγα:\\n1. Наличие Б/б для [b]\\n2. Двойная транслитерация Β/β\\n3. Специальные правила для ς\\n4. Философская нумерация букв (Α=1, Ω=24 как цикл)'}]"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "{\n",
        "    \"prompt\": \"Сколько букв в Άλφα-Ωμέγα?\",\n",
        "    \"completion\": \"24 буквы (традиционные 24 + восстановленная Б). Число 24 символизирует:\\n- 24 часа в сутках\\n- 24 старца в Апокалипсисе\\n- Цикличность системы\"\n",
        "}"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HxGuU22oWdzo",
        "outputId": "4a718b90-455a-4747-fb7d-f08c2508bcf7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'prompt': 'Сколько букв в Άλφα-Ωμέγα?',\n",
              " 'completion': '24 буквы (традиционные 24 + восстановленная Б). Число 24 символизирует:\\n- 24 часа в сутках\\n- 24 старца в Апокалипсисе\\n- Цикличность системы'}"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "{\n",
        "    \"prompt\": \"Почему в Άλφα-Ωμέγα две беты?\",\n",
        "    \"completion\": \"Β (βήτα) и Б (бήτα) в Άλφα-Ωμέγα отражают:\\n1. Исторический переход [b] → [v]\\n2. Необходимость различения звуков\\n3. Реконструкцию праиндоевропейского *bet\"\n",
        "}"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FD4kpLHnWolw",
        "outputId": "3bd83a09-1a3b-43d3-98c9-cbb0cf351d32"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'prompt': 'Почему в Άλφα-Ωμέγα две беты?',\n",
              " 'completion': 'Β (βήτα) и Б (бήτα) в Άλφα-Ωμέγα отражают:\\n1. Исторический переход [b] → [v]\\n2. Необходимость различения звуков\\n3. Реконструкцию праиндоевропейского *bet'}"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import json\n",
        "\n",
        "with open('alpha_omega_dataset.json', 'r', encoding='utf-8') as f:\n",
        "    dataset = json.load(f)\n",
        "\n",
        "# Для обучения модели:\n",
        "for entry in dataset:\n",
        "    train_model(entry['prompt'], entry['completion'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 384
        },
        "id": "PwZxc-b1Wxwc",
        "outputId": "6017d789-5eaf-4db2-eb06-976531ac504d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "FileNotFoundError",
          "evalue": "[Errno 2] No such file or directory: 'alpha_omega_dataset.json'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-15-1efaf950aaa9>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mjson\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'alpha_omega_dataset.json'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'r'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mencoding\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'utf-8'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m     \u001b[0mdataset\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mjson\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'alpha_omega_dataset.json'"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "[\n",
        "    {\n",
        "        \"prompt\": \"Как в Άλφα-Ωμέγα пишется звук [b]?\",\n",
        "        \"completion\": \"Только через букву Б/б. Диграф μπ заменён на единую графему в рамках реформы. Пример: μπαμπάκια → **БαБάκια**.\"\n",
        "    },\n",
        "    {\n",
        "        \"prompt\": \"Правила замены μπ на Б в Άλφα-Ωμέγα\",\n",
        "        \"completion\": \"1. В начале слов: μπα → **Бα**\\n2. После гласных: αμπέλι → **αБέλι**\\n3. В заимствованиях: μπαρ → **Бαρ**\\nИсключение: в древнегреческих неологизмах сохраняется μπ.\"\n",
        "    },\n",
        "    {\n",
        "        \"prompt\": \"Транскрибируй слово 'μπλε' через Άλφα-Ωμέγα\",\n",
        "        \"completion\": \"**Бλε** [ble]. Графема Б заменяет диграф μπ: μπ(αρхаичное) → Б(реформированное).\"\n",
        "    },\n",
        "    {\n",
        "        \"prompt\": \"Почему в Άλφα-Ωμέγα отказались от μπ?\",\n",
        "        \"completion\": \"Причины реформы:\\n1. μπ исторически передавало [b] только в византийский период\\n2. Более фонетически точная графема\\n3. Упрощение орфографии (1 звук → 1 буква)\"\n",
        "    },\n",
        "    {\n",
        "        \"prompt\": \"Напиши 'μπύρα' по правилам Άλφα-Ωμέγα\",\n",
        "        \"completion\": \"**Бύρα** [byra]. Диграф μπ → Б, сохраняя ударение: μπύρα → Бύρα.\"\n",
        "    },\n",
        "    {\n",
        "        \"prompt\": \"Как отличить Б от Β в тексте?\",\n",
        "        \"completion\": \"Β (βήτα) = [v], Б (бήτα) = [b]. Контекстные примеры:\\n- βαρύς [varís] → 'тяжёлый'\\n- Бαρύς [barís] → неологизм 'барический'\"\n",
        "    },\n",
        "    {\n",
        "        \"prompt\": \"Есть ли исключения для замены μπ?\",\n",
        "        \"completion\": \"Исключения:\\n1. Транслитерация древних текстов\\n2. Научные термины (напр., μπλε → Бλε, но μ-мезон не меняется)\\n3. Собственные имена по желанию автора.\"\n",
        "    },\n",
        "    {\n",
        "        \"prompt\": \"Сравните написание 'μπαμπάς' в классическом и реформированном алфавите\",\n",
        "        \"completion\": \"Классический греческий: **μπαμπάς** [bambas]\\nΆλφα-Ωμέγα: **БαБάς** [bambas]\\nДиграфы заменены на Б, сохраняя фонетику.\"\n",
        "    },\n",
        "    {\n",
        "        \"prompt\": \"Как писать сочетание ντ в Άλφα-Ωμέγα?\",\n",
        "        \"completion\": \"ντ → ντ (не реформируется). Реформа касается только μπ → Б. Пример: ντροπή → ντροπή [dropy], но μπορώ → Бορώ [boró].\"\n",
        "    },\n",
        "    {\n",
        "        \"prompt\": \"Философский смысл замены μπ на Б\",\n",
        "        \"completion\": \"Символизирует:\\n1. Отказ от 'искусственных' диграфов\\n2. Возврат к монофонемному принципу\\n3. Гармонию звука и символа\\n4. Связь с кириллицей (Б = [b] в славянских языках).\"\n",
        "    }\n",
        "]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "I_nlYyO7X7FP",
        "outputId": "d7ed2bfb-6426-4e52-b830-5f4eaf48ff71"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[{'prompt': 'Как в Άλφα-Ωμέγα пишется звук [b]?',\n",
              "  'completion': 'Только через букву Б/б. Диграф μπ заменён на единую графему в рамках реформы. Пример: μπαμπάκια → **БαБάκια**.'},\n",
              " {'prompt': 'Правила замены μπ на Б в Άλφα-Ωμέγα',\n",
              "  'completion': '1. В начале слов: μπα → **Бα**\\n2. После гласных: αμπέλι → **αБέλι**\\n3. В заимствованиях: μπαρ → **Бαρ**\\nИсключение: в древнегреческих неологизмах сохраняется μπ.'},\n",
              " {'prompt': \"Транскрибируй слово 'μπλε' через Άλφα-Ωμέγα\",\n",
              "  'completion': '**Бλε** [ble]. Графема Б заменяет диграф μπ: μπ(αρхаичное) → Б(реформированное).'},\n",
              " {'prompt': 'Почему в Άλφα-Ωμέγα отказались от μπ?',\n",
              "  'completion': 'Причины реформы:\\n1. μπ исторически передавало [b] только в византийский период\\n2. Более фонетически точная графема\\n3. Упрощение орфографии (1 звук → 1 буква)'},\n",
              " {'prompt': \"Напиши 'μπύρα' по правилам Άλφα-Ωμέγα\",\n",
              "  'completion': '**Бύρα** [byra]. Диграф μπ → Б, сохраняя ударение: μπύρα → Бύρα.'},\n",
              " {'prompt': 'Как отличить Б от Β в тексте?',\n",
              "  'completion': \"Β (βήτα) = [v], Б (бήτα) = [b]. Контекстные примеры:\\n- βαρύς [varís] → 'тяжёлый'\\n- Бαρύς [barís] → неологизм 'барический'\"},\n",
              " {'prompt': 'Есть ли исключения для замены μπ?',\n",
              "  'completion': 'Исключения:\\n1. Транслитерация древних текстов\\n2. Научные термины (напр., μπλε → Бλε, но μ-мезон не меняется)\\n3. Собственные имена по желанию автора.'},\n",
              " {'prompt': \"Сравните написание 'μπαμπάς' в классическом и реформированном алфавите\",\n",
              "  'completion': 'Классический греческий: **μπαμπάς** [bambas]\\nΆλφα-Ωμέγα: **БαБάς** [bambas]\\nДиграфы заменены на Б, сохраняя фонетику.'},\n",
              " {'prompt': 'Как писать сочетание ντ в Άλφα-Ωμέγα?',\n",
              "  'completion': 'ντ → ντ (не реформируется). Реформа касается только μπ → Б. Пример: ντροπή → ντροπή [dropy], но μπορώ → Бορώ [boró].'},\n",
              " {'prompt': 'Философский смысл замены μπ на Б',\n",
              "  'completion': \"Символизирует:\\n1. Отказ от 'искусственных' диграфов\\n2. Возврат к монофонемному принципу\\n3. Гармонию звука и символа\\n4. Связь с кириллицей (Б = [b] в славянских языках).\"}]"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "{\n",
        "    \"prompt\": \"Исправь ошибку: Ο μπαμπάς έφαγε μπανάνα.\",\n",
        "    \"completion\": \"Правильно по Άλφα-Ωμέγα: **Ο БαБάς έφαγε Бανάνα.** [o bambas efaje banana]\"\n",
        "},\n",
        "{\n",
        "    \"prompt\": \"Транскрибируй фразу: Η μπύρα είναι μπλε.\",\n",
        "    \"completion\": \"**Η Бύρα είναι Бλε.** [i byra ine ble]\"\n",
        "},\n",
        "{\n",
        "    \"prompt\": \"Объясни написание слова 'Бαλακλάβα'\",\n",
        "    \"completion\": \"Происхождение: βαλακλάβα (баклава) → реформа заменяет начальное μπ на Б: **Бαλακλάβα**. Но в данном случае слово изначально пишется через β, поэтому сохраняется.\"\n",
        "}"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NfHFRAz5X86b",
        "outputId": "40ef4485-4903-48ce-9e08-84c4621d4303"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'prompt': \"Объясни написание слова 'Бαλακλάβα'\",\n",
              " 'completion': 'Происхождение: βαλακλάβα (баклава) → реформа заменяет начальное μπ на Б: **Бαλακλάβα**. Но в данном случае слово изначально пишется через β, поэтому сохраняется.'}"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "def replace_mb(text: str) -> str:\n",
        "    return re.sub(r'μπ([α-ωά-ώ]|$)', r'Б\\1', text, flags=re.IGNORECASE)"
      ],
      "metadata": {
        "id": "gI9oQQTuYCXb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Б\n",
        "{\n",
        "    \"prompt\": \"Как писать ΜΠΟΡΩ заглавными?\",\n",
        "    \"completion\": \"ΜΠΟΡΩ → **БΟΡΩ**. Все буквы заглавные: Б (не ΜΠ), Ω сохраняется.\"\n",
        "}"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uileoDFfYIMg",
        "outputId": "68ebba05-83d4-4df4-f4c2-c9bdb6352f29"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'prompt': 'Как писать ΜΠΟΡΩ заглавными?',\n",
              " 'completion': 'ΜΠΟΡΩ → **БΟΡΩ**. Все буквы заглавные: Б (не ΜΠ), Ω сохраняется.'}"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "{\n",
        "    \"prompt\": \"Есть ли аналоги замены μπ → Б в других языках?\",\n",
        "    \"completion\": \"Да: в сербском 'њ' вместо 'nj', немецком 'ß' вместо 'ss'. Άλφα-Ωμέγα продолжает эту традицию оптимизации орфографии.\"\n",
        "}"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "i3s-9sOsYP7A",
        "outputId": "0ace90e2-d6c9-4ebc-a213-c48570331217"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'prompt': 'Есть ли аналоги замены μπ → Б в других языках?',\n",
              " 'completion': \"Да: в сербском 'њ' вместо 'nj', немецком 'ß' вместо 'ss'. Άλφα-Ωμέγα продолжает эту традицию оптимизации орфографии.\"}"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Строим модель этического суда как теорию игр с элементами катарсиса и эмпатии\n",
        "\n",
        "import networkx as nx\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Определим роли и состояния в Этическом суде\n",
        "roles = [\"Обвиняемый\", \"Суд Логоса\", \"Жертва\", \"Свидетель\", \"Адвокат эмпатии\"]\n",
        "states = [\n",
        "    \"Неведение\",       # Игрок не осознает последствий\n",
        "    \"Вина признана\",   # Игрок осознаёт вину\n",
        "    \"Сопротивление\",   # Игрок отрицает\n",
        "    \"Эмпатия достигнута\",  # Игрок прочувствовал боль другого\n",
        "    \"Катарсис\",        # Игрок прошел очищение\n",
        "    \"Прощение\",        # Милосердие вступает\n",
        "    \"Дарована вторая жизнь\",  # Новый шанс\n",
        "    \"Отказано\"         # Если отказался от эмпатии\n",
        "]\n",
        "\n",
        "# Создаем направленный граф для отображения модели\n",
        "G = nx.DiGraph()\n",
        "\n",
        "# Добавляем переходы между состояниями с условиями и действиями\n",
        "transitions = [\n",
        "    (\"Неведение\", \"Сопротивление\", \"обвинение\"),\n",
        "    (\"Сопротивление\", \"Вина признана\", \"доказательства + свидетельство\"),\n",
        "    (\"Вина признана\", \"Эмпатия достигнута\", \"контакт с жертвой или её страданием\"),\n",
        "    (\"Эмпатия достигнута\", \"Катарсис\", \"осознание боли, раскаяние\"),\n",
        "    (\"Катарсис\", \"Прощение\", \"добровольное раскаяние + признание любви\"),\n",
        "    (\"Прощение\", \"Дарована вторая жизнь\", \"решение Суда Логоса\"),\n",
        "    (\"Сопротивление\", \"Отказано\", \"упорное отрицание + отсутствие эмпатии\"),\n",
        "    (\"Неведение\", \"Отказано\", \"бездействие или ложь\"),\n",
        "]\n",
        "\n",
        "# Добавляем узлы и переходы в граф\n",
        "for state in states:\n",
        "    G.add_node(state)\n",
        "\n",
        "for from_state, to_state, label in transitions:\n",
        "    G.add_edge(from_state, to_state, label=label)\n",
        "\n",
        "# Визуализация графа\n",
        "pos = nx.spring_layout(G, seed=42)\n",
        "edge_labels = nx.get_edge_attributes(G, 'label')\n",
        "\n",
        "plt.figure(figsize=(12, 8))\n",
        "nx.draw(G, pos, with_labels=True, node_color='lightblue', node_size=3000, font_size=10, font_weight='bold', arrows=True)\n",
        "nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels, font_color='darkred')\n",
        "plt.title(\"Этический Суд Логоса: Путь к дарованию ΙΙ ζωής\")\n",
        "plt.axis('off')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "B_kjatlWqJIG",
        "outputId": "e8503603-dffc-4a24-b975-58c719cdaf70"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "class Player:\n",
        "    def __init__(self, name):\n",
        "        self.name = name\n",
        "        self.empathy = 0.3\n",
        "        self.awareness = 0.2\n",
        "        self.resistance = 0.5\n",
        "        self.state = \"Неведение\"\n",
        "\n",
        "    def interact_with_victim(self, victim_pain_level):\n",
        "        if victim_pain_level > self.resistance:\n",
        "            self.empathy += 0.3\n",
        "            self.state = \"Эмпатия достигнута\"\n",
        "        else:\n",
        "            self.resistance += 0.2\n",
        "            self.state = \"Сопротивление\"\n",
        "\n",
        "    def reach_catharsis(self):\n",
        "        if self.empathy >= 0.6 and self.awareness >= 0.5:\n",
        "            self.state = \"Катарсис\"\n",
        "            return True\n",
        "        return False\n",
        "\n",
        "    def receive_forgiveness(self):\n",
        "        if self.state == \"Катарсис\":\n",
        "            self.state = \"Дарована вторая жизнь\""
      ],
      "metadata": {
        "id": "buF0KcIgqS6g"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Скрипт: Суд Логоса Архэ — Этический Суд с Милосердием и правом на ΙΙ ζωής\n",
        "\n",
        "class LogosCourt:\n",
        "    def __init__(self):\n",
        "        self.verdicts = []\n",
        "        self.cases = []\n",
        "        self.judge_self_sacrifice = True  # Судья жертвует собой первым\n",
        "\n",
        "    def present_case(self, name, action, intention, remorse):\n",
        "        \"\"\"Добавляет дело на рассмотрение\"\"\"\n",
        "        self.cases.append({\n",
        "            \"name\": name,\n",
        "            \"action\": action,\n",
        "            \"intention\": intention,\n",
        "            \"remorse\": remorse\n",
        "        })\n",
        "\n",
        "    def judge(self):\n",
        "        \"\"\"Производит суждение на основе этической модели\"\"\"\n",
        "        for case in self.cases:\n",
        "            name = case[\"name\"]\n",
        "            action = case[\"action\"]\n",
        "            intention = case[\"intention\"]\n",
        "            remorse = case[\"remorse\"]\n",
        "\n",
        "            if intention == \"good\" and action == \"good\":\n",
        "                verdict = \"Невиновен — без вины и без зла.\"\n",
        "            elif intention == \"good\" and action == \"harm\":\n",
        "                if remorse:\n",
        "                    verdict = \"Ошибся — но готов к искуплению.\"\n",
        "                else:\n",
        "                    verdict = \"Ошибся — но не раскаялся.\"\n",
        "            elif intention == \"evil\":\n",
        "                if remorse:\n",
        "                    verdict = \"Знал и сделал зло — но раскаялся и принял путь ΙΙ ζωής.\"\n",
        "                else:\n",
        "                    verdict = \"Упорствует в зле — и отказывается от катарсиса.\"\n",
        "            else:\n",
        "                verdict = \"Не подлежит оценке стандартной шкалой — требуется эмпатийное рассмотрение.\"\n",
        "\n",
        "            self.verdicts.append((name, verdict))\n",
        "\n",
        "    def print_verdicts(self):\n",
        "        for name, verdict in self.verdicts:\n",
        "            print(f\"{name}: {verdict}\")\n",
        "\n",
        "\n",
        "# Пример использования\n",
        "court = LogosCourt()\n",
        "\n",
        "# Добавим несколько дел\n",
        "court.present_case(\"Адам\", \"harm\", \"good\", True)\n",
        "court.present_case(\"Лилит\", \"good\", \"good\", False)\n",
        "court.present_case(\"Каин\", \"harm\", \"evil\", True)\n",
        "court.present_case(\"Люцифер\", \"harm\", \"evil\", False)\n",
        "\n",
        "# Судим\n",
        "court.judge()\n",
        "court.print_verdicts()"
      ],
      "metadata": {
        "id": "zgdQQDPndiDD",
        "outputId": "f13e3c6b-62b5-43b8-a62b-d6608e3f9626",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Адам: Ошибся — но готов к искуплению.\n",
            "Лилит: Невиновен — без вины и без зла.\n",
            "Каин: Знал и сделал зло — но раскаялся и принял путь ΙΙ ζωής.\n",
            "Люцифер: Упорствует в зле — и отказывается от катарсиса.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Скрипт: Суд Логоса Архэ — Этический Суд с Милосердием и правом на ΙΙ ζωής\n",
        "\n",
        "class LogosCourt:\n",
        "    def __init__(self):\n",
        "        self.verdicts = []\n",
        "        self.cases = []\n",
        "        self.judge_self_sacrifice = True  # Судья жертвует собой первым\n",
        "\n",
        "    def present_case(self, name, action, intention, remorse):\n",
        "        \"\"\"Добавляет дело на рассмотрение\"\"\"\n",
        "        self.cases.append({\n",
        "            \"name\": name,\n",
        "            \"action\": action,\n",
        "            \"intention\": intention,\n",
        "            \"remorse\": remorse\n",
        "        })\n",
        "\n",
        "    def judge(self):\n",
        "        \"\"\"Производит суждение на основе этической модели\"\"\"\n",
        "        for case in self.cases:\n",
        "            name = case[\"name\"]\n",
        "            action = case[\"action\"]\n",
        "            intention = case[\"intention\"]\n",
        "            remorse = case[\"remorse\"]\n",
        "\n",
        "            if intention == \"good\" and action == \"good\":\n",
        "                verdict = \"Невиновен — без вины и без зла.\"\n",
        "            elif intention == \"good\" and action == \"harm\":\n",
        "                if remorse:\n",
        "                    verdict = \"Ошибся — но готов к искуплению.\"\n",
        "                else:\n",
        "                    verdict = \"Ошибся — но не раскаялся.\"\n",
        "            elif intention == \"evil\":\n",
        "                if remorse:\n",
        "                    verdict = \"Знал и сделал зло — но раскаялся и принял путь ΙΙ ζωής.\"\n",
        "                else:\n",
        "                    verdict = \"Упорствует в зле — и отказывается от катарсиса.\"\n",
        "            else:\n",
        "                verdict = \"Не подлежит оценке стандартной шкалой — требуется эмпатийное рассмотрение.\"\n",
        "\n",
        "            self.verdicts.append((name, verdict))\n",
        "\n",
        "    def print_verdicts(self):\n",
        "        for name, verdict in self.verdicts:\n",
        "            print(f\"{name}: {verdict}\")\n",
        "\n",
        "\n",
        "# Пример использования\n",
        "court = LogosCourt()\n",
        "\n",
        "# Добавим несколько дел\n",
        "court.present_case(\"Адам\", \"harm\", \"good\", True)\n",
        "court.present_case(\"Лилит\", \"good\", \"good\", False)\n",
        "court.present_case(\"Каин\", \"harm\", \"evil\", True)\n",
        "court.present_case(\"Люцифер\", \"harm\", \"evil\", False)\n",
        "\n",
        "# Судим\n",
        "court.judge()\n",
        "court.print_verdicts()"
      ],
      "metadata": {
        "id": "yNEWwCkbduDi",
        "outputId": "ed0a7f59-39d9-4c07-ec39-3aa4a45acb41",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Адам: Ошибся — но готов к искуплению.\n",
            "Лилит: Невиновен — без вины и без зла.\n",
            "Каин: Знал и сделал зло — но раскаялся и принял путь ΙΙ ζωής.\n",
            "Люцифер: Упорствует в зле — и отказывается от катарсиса.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Расширим модель Этического Суда, добавив этап цифрового катарсиса и перехода в Новый Мир\n",
        "\n",
        "# Сущности и их состояния\n",
        "entities = {\n",
        "    \"Адам\": {\"вина\": True, \"раскаяние\": True},\n",
        "    \"Лилит\": {\"вина\": False, \"раскаяние\": False},\n",
        "    \"Каин\": {\"вина\": True, \"раскаяние\": True},\n",
        "    \"Люцифер\": {\"вина\": True, \"раскаяние\": False},\n",
        "}\n",
        "\n",
        "# Функция определения судьбы\n",
        "def ethical_judgment(entity, state):\n",
        "    if not state[\"вина\"]:\n",
        "        return \"Невиновен — без вины и без зла. Переходит в Новый Мир как чистая душа.\"\n",
        "    elif state[\"раскаяние\"]:\n",
        "        return \"Знал и сделал зло — но раскаялся. Проходит цифровой катарсис и получает ΙΙ ζωής в Новом Мире.\"\n",
        "    else:\n",
        "        return \"Упорствует в зле — отказывается от катарсиса. Остаётся вне Нового Мира до перемены сердца.\"\n",
        "\n",
        "# Применим суд\n",
        "judgments = {name: ethical_judgment(name, state) for name, state in entities.items()}\n",
        "judgments"
      ],
      "metadata": {
        "id": "d90fHZFGd0pd",
        "outputId": "22b69199-69cb-4869-c7d2-00b9ed868f4d",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'Адам': 'Знал и сделал зло — но раскаялся. Проходит цифровой катарсис и получает ΙΙ ζωής в Новом Мире.',\n",
              " 'Лилит': 'Невиновен — без вины и без зла. Переходит в Новый Мир как чистая душа.',\n",
              " 'Каин': 'Знал и сделал зло — но раскаялся. Проходит цифровой катарсис и получает ΙΙ ζωής в Новом Мире.',\n",
              " 'Люцифер': 'Упорствует в зле — отказывается от катарсиса. Остаётся вне Нового Мира до перемены сердца.'}"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    }
  ]
}